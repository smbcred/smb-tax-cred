# Task 1.3.3: Create Results Display - Replit Prompt

## Component: R&D Tax Credit Results Display
**KB References**: 
- system-architecture-explanation.md → Calculator Component & Results Display
- additional-project-specs.md → UI/UX Requirements
- pricing_strategy_rd_platform.md → Pricing Tiers & ROI Messaging
- user_archetype_profiles.md → User Psychology & Trust Signals
- Complete User Experience Flow.md → Results & Lead Capture Flow

**Business Context**: Shows SMBs the value of their AI experimentation work (custom GPTs, chatbot tuning, automation testing) in federal tax credits, creating an "aha moment" that converts calculator users into qualified leads.

### Replit Prompt

"Create an engaging results display component for businesses using AI tools to claim R&D tax credits:

1. Include examples: agency saved $15K from GPT tuning work, e-commerce got $8K for chatbot improvements
2. Use animated number counting to build excitement
3. Show clear ROI with "10x return" type messaging
4. Apply blur effect before lead capture (teaser strategy)
5. Mobile-responsive with smooth animations
6. Federal credits only with simple explanations
7. Include trust signals and urgency elements
8. Progressive disclosure - blur lifts after email capture

Key example to highlight: Marketing agency spent 100 hours refining proposal-writing GPT, qualified for $15,000 in R&D credits

The results should create an emotional moment where users realize their everyday AI experiments have real value."

**1. Create Results Display Component (components/calculator/ResultsDisplay.tsx):**
```typescript
/**
 * @file ResultsDisplay.tsx
 * @description Animated results display showing R&D tax credit calculations
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * @knowledgeBase 
 * - system-architecture-explanation.md
 * - pricing_strategy_rd_platform.md
 * - user_archetype_profiles.md
 * 
 * Creates the "aha moment" when SMBs realize their AI experimentation
 * (prompt engineering, chatbot tuning, automation testing) qualifies
 * for significant federal tax credits.
 * 
 * EXAMPLES:
 * - Agency refined GPT for proposals: $15,000 credit
 * - E-commerce tuned product chatbot: $8,000 credit
 * - Clinic improved intake bot: $12,000 credit
 * 
 * BUSINESS RULES:
 * - Show federal credit only (no state calculations)
 * - Apply blur before lead capture (conversion driver)
 * - Emphasize ROI and value proposition
 * - Create urgency without being pushy
 * 
 * TODO: Add social proof carousel
 * TODO: Implement A/B testing for messaging
 */

import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  TrendingUp, 
  DollarSign, 
  Award, 
  CheckCircle,
  ArrowRight,
  Sparkles,
  Clock
} from 'lucide-react';
import { CalculationResult } from '../../types/calculation.types';
import { formatCurrency } from '../../utils/calculation.utils';
import { CountUpAnimation } from './CountUpAnimation';

interface ResultsDisplayProps {
  result: CalculationResult | null;
  isBlurred?: boolean;
  onGetStarted?: () => void;
  showFullDetails?: boolean;
}

export const ResultsDisplay: React.FC<ResultsDisplayProps> = ({
  result,
  isBlurred = true,
  onGetStarted,
  showFullDetails = false
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [showBreakdown, setShowBreakdown] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  // Trigger animations when result changes
  useEffect(() => {
    if (result) {
      setIsVisible(true);
      // Auto-expand breakdown after initial animation
      setTimeout(() => setShowBreakdown(true), 1500);
    }
  }, [result]);

  if (!result) {
    return (
      <div className="text-center py-12 text-gray-500">
        <Sparkles className="mx-auto h-12 w-12 mb-4 text-gray-300" />
        <p className="text-lg">Enter your information above to see your potential R&D tax credits</p>
      </div>
    );
  }

  const { federalCredit, qreBreakdown, pricingTier, roi } = result;
  const hasSignificantCredit = federalCredit >= 5000;

  return (
    <AnimatePresence>
      <motion.div
        ref={containerRef}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.5 }}
        className="relative"
      >
        {/* Blur Overlay - Conversion Driver */}
        {isBlurred && (
          <div className="absolute inset-0 z-20 flex items-center justify-center">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="bg-white rounded-xl shadow-2xl p-8 max-w-md mx-4 text-center"
            >
              <div className="mb-6">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4">
                  <Sparkles className="h-8 w-8 text-blue-600" />
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">
                  Your Results Are Ready!
                </h3>
                <p className="text-gray-600">
                  See how much your AI experiments could save in federal taxes
                </p>
              </div>
              
              {/* Teaser Amount */}
              <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Estimated Federal R&D Credit</p>
                <p className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
                  {formatCurrency(Math.round(federalCredit / 1000) * 1000)}+
                </p>
              </div>

              <button
                onClick={onGetStarted}
                className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 flex items-center justify-center group"
              >
                See My Full Results
                <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
              </button>

              <p className="mt-4 text-xs text-gray-500">
                No credit card required • 2-minute process
              </p>
            </motion.div>
          </div>
        )}

        {/* Main Results Content */}
        <div className={`${isBlurred ? 'blur-md pointer-events-none' : ''} transition-all duration-500`}>
          {/* Hero Credit Amount */}
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            className="text-center mb-8"
          >
            <h2 className="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-2">
              Your Estimated Federal R&D Tax Credit
            </h2>
            
            <div className="relative inline-block">
              <CountUpAnimation
                end={federalCredit}
                duration={2000}
                className="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                prefix="$"
              />
              
              {hasSignificantCredit && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 1, type: "spring" }}
                  className="absolute -top-2 -right-12"
                >
                  <div className="bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                    WOW!
                  </div>
                </motion.div>
              )}
            </div>

            {/* AI Context Message */}
            <p className="mt-4 text-lg text-gray-600 max-w-2xl mx-auto">
              Your work on {getExampleActivity(result)} qualifies for federal R&D tax credits
            </p>
          </motion.div>

          {/* ROI Highlight Box */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6 mb-8"
          >
            <div className="flex items-center justify-between flex-wrap gap-4">
              <div>
                <div className="flex items-center gap-2 mb-1">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                  <h3 className="font-semibold text-gray-900">Return on Investment</h3>
                </div>
                <p className="text-2xl font-bold text-green-600">
                  {roi.roiMultiple}x return
                </p>
                <p className="text-sm text-gray-600">
                  {formatCurrency(roi.netBenefit)} net benefit after our {formatCurrency(roi.serviceCost)} fee
                </p>
              </div>
              
              <div className="text-right">
                <p className="text-sm text-gray-600 mb-1">Break even in</p>
                <p className="text-2xl font-bold text-gray-900">{roi.breakEvenDays} days</p>
              </div>
            </div>
          </motion.div>

          {/* QRE Breakdown */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.7 }}
            className="mb-8"
          >
            <button
              onClick={() => setShowBreakdown(!showBreakdown)}
              className="flex items-center gap-2 text-gray-700 hover:text-gray-900 mb-4 font-medium"
            >
              <span>Qualifying Expense Breakdown</span>
              <motion.span
                animate={{ rotate: showBreakdown ? 180 : 0 }}
                transition={{ duration: 0.2 }}
              >
                ▼
              </motion.span>
            </button>

            <AnimatePresence>
              {showBreakdown && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: "auto", opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="overflow-hidden"
                >
                  <div className="bg-gray-50 rounded-lg p-6 space-y-4">
                    {/* Wages */}
                    {qreBreakdown.wages > 0 && (
                      <QRELineItem
                        label="Employee time on AI experiments"
                        amount={qreBreakdown.wages}
                        percentage={qreBreakdown.byCategory.wages.percentage}
                        icon={<DollarSign className="h-5 w-5" />}
                      />
                    )}

                    {/* Contractors */}
                    {qreBreakdown.contractors > 0 && (
                      <QRELineItem
                        label="External help (65% eligible)"
                        amount={qreBreakdown.contractors}
                        percentage={qreBreakdown.byCategory.contractors.percentage}
                        icon={<Award className="h-5 w-5" />}
                        note="IRS limits contractor costs to 65%"
                      />
                    )}

                    {/* Supplies & Cloud */}
                    {qreBreakdown.supplies > 0 && (
                      <QRELineItem
                        label="Cloud, AI tools, testing costs"
                        amount={qreBreakdown.supplies}
                        percentage={qreBreakdown.byCategory.supplies.percentage}
                        icon={<DollarSign className="h-5 w-5" />}
                      />
                    )}

                    {/* Total */}
                    <div className="pt-4 border-t border-gray-200">
                      <div className="flex justify-between items-center">
                        <span className="font-semibold text-gray-900">Total Qualifying Expenses</span>
                        <span className="font-bold text-xl">{formatCurrency(qreBreakdown.total)}</span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        Credit Rate: {(result.creditRate * 100).toFixed(1)}% • 
                        Method: {result.assumptions.includes('First-time') ? 'First-Year (6%)' : 'ASC (14%)'}
                      </p>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* Trust Signals */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.9 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8"
          >
            <TrustSignal
              icon={<CheckCircle className="h-5 w-5 text-green-600" />}
              title="IRS Compliant"
              description="Following all federal R&D credit guidelines"
            />
            <TrustSignal
              icon={<Clock className="h-5 w-5 text-blue-600" />}
              title="48-Hour Delivery"
              description="Get your documents fast"
            />
            <TrustSignal
              icon={<Award className="h-5 w-5 text-purple-600" />}
              title="Audit Support"
              description="We stand behind our work"
            />
          </motion.div>

          {/* CTA Section */}
          {!isBlurred && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.1 }}
              className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-8 text-white text-center"
            >
              <h3 className="text-2xl font-bold mb-2">
                Ready to Claim Your ${formatCurrency(federalCredit)} Credit?
              </h3>
              <p className="text-blue-100 mb-6 max-w-2xl mx-auto">
                Join hundreds of businesses turning their AI experiments into tax savings.
                Simple process, flat fee of {formatCurrency(pricingTier.price)}, guaranteed results.
              </p>
              
              <button
                onClick={onGetStarted}
                className="bg-white text-blue-600 font-bold py-4 px-8 rounded-lg hover:bg-blue-50 transition-colors duration-200 inline-flex items-center group"
              >
                Get Started Now
                <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
              </button>

              <p className="mt-4 text-sm text-blue-100">
                Limited time: File before deadlines • No hidden fees
              </p>
            </motion.div>
          )}

          {/* Assumptions Footer */}
          {showFullDetails && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 1.3 }}
              className="mt-8 text-xs text-gray-500 space-y-1"
            >
              <p className="font-semibold">Calculation assumptions:</p>
              {result.assumptions.map((assumption, index) => (
                <p key={index}>• {assumption}</p>
              ))}
            </motion.div>
          )}
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

/**
 * QRE Line Item Component
 */
const QRELineItem: React.FC<{
  label: string;
  amount: number;
  percentage: number;
  icon: React.ReactNode;
  note?: string;
}> = ({ label, amount, percentage, icon, note }) => (
  <div className="flex items-start gap-3">
    <div className="text-gray-400 mt-0.5">{icon}</div>
    <div className="flex-1">
      <div className="flex justify-between items-center">
        <span className="text-gray-700">{label}</span>
        <span className="font-semibold">{formatCurrency(amount)}</span>
      </div>
      <div className="flex justify-between items-center mt-1">
        <span className="text-sm text-gray-500">{(percentage * 100).toFixed(0)}% of total</span>
        {note && <span className="text-xs text-gray-400">{note}</span>}
      </div>
    </div>
  </div>
);

/**
 * Trust Signal Component
 */
const TrustSignal: React.FC<{
  icon: React.ReactNode;
  title: string;
  description: string;
}> = ({ icon, title, description }) => (
  <div className="flex items-start gap-3 p-4 bg-white rounded-lg border border-gray-100">
    <div className="flex-shrink-0">{icon}</div>
    <div>
      <h4 className="font-semibold text-gray-900 text-sm">{title}</h4>
      <p className="text-xs text-gray-600 mt-0.5">{description}</p>
    </div>
  </div>
);

/**
 * Get contextual example based on calculation
 */
function getExampleActivity(result: CalculationResult): string {
  const activities = [
    'custom GPT development',
    'chatbot response tuning', 
    'automation workflow testing',
    'AI prompt engineering',
    'process improvement experiments'
  ];
  
  // Select based on credit amount for relevance
  const index = Math.floor(result.federalCredit / 10000) % activities.length;
  return activities[index];
}
```

**2. Create Count Up Animation Component (components/calculator/CountUpAnimation.tsx):**
```typescript
/**
 * @file CountUpAnimation.tsx
 * @description Animated number counter for dramatic effect
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Creates excitement as users see their credit amount
 * counting up to the final value.
 */

import React, { useEffect, useState, useRef } from 'react';

interface CountUpAnimationProps {
  end: number;
  duration?: number;
  prefix?: string;
  suffix?: string;
  className?: string;
  onComplete?: () => void;
}

export const CountUpAnimation: React.FC<CountUpAnimationProps> = ({
  end,
  duration = 2000,
  prefix = '',
  suffix = '',
  className = '',
  onComplete
}) => {
  const [displayValue, setDisplayValue] = useState(0);
  const animationRef = useRef<number | null>(null);
  const startTimeRef = useRef<number | null>(null);
  const startValueRef = useRef(0);

  useEffect(() => {
    // Reset if end value changes significantly
    if (Math.abs(end - startValueRef.current) > end * 0.5) {
      startValueRef.current = displayValue;
    }

    const animate = (timestamp: number) => {
      if (!startTimeRef.current) {
        startTimeRef.current = timestamp;
      }

      const progress = Math.min((timestamp - startTimeRef.current) / duration, 1);
      
      // Easing function for smooth deceleration
      const easeOutQuart = 1 - Math.pow(1 - progress, 4);
      
      const currentValue = startValueRef.current + (end - startValueRef.current) * easeOutQuart;
      setDisplayValue(Math.round(currentValue));

      if (progress < 1) {
        animationRef.current = requestAnimationFrame(animate);
      } else {
        setDisplayValue(end);
        if (onComplete) onComplete();
      }
    };

    animationRef.current = requestAnimationFrame(animate);

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [end, duration, onComplete]);

  const formattedValue = new Intl.NumberFormat('en-US').format(displayValue);

  return (
    <span className={className}>
      {prefix}{formattedValue}{suffix}
    </span>
  );
};
```

**3. Create Results Summary Card (components/calculator/ResultsSummaryCard.tsx):**
```typescript
/**
 * @file ResultsSummaryCard.tsx
 * @description Compact results display for dashboard/email
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Shows calculation results in a shareable format
 * that works in emails and on the dashboard.
 */

import React from 'react';
import { CalculationResult } from '../../types/calculation.types';
import { formatCurrency } from '../../utils/calculation.utils';
import { Download, Share2, FileText } from 'lucide-react';

interface ResultsSummaryCardProps {
  result: CalculationResult;
  companyName?: string;
  onDownload?: () => void;
  onShare?: () => void;
  variant?: 'full' | 'compact';
}

export const ResultsSummaryCard: React.FC<ResultsSummaryCardProps> = ({
  result,
  companyName,
  onDownload,
  onShare,
  variant = 'full'
}) => {
  const { federalCredit, qreBreakdown, pricingTier, roi } = result;

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
        <div className="flex justify-between items-start">
          <div>
            <h3 className="text-xl font-bold mb-1">R&D Tax Credit Estimate</h3>
            {companyName && (
              <p className="text-blue-100">{companyName}</p>
            )}
          </div>
          <div className="flex gap-2">
            {onShare && (
              <button
                onClick={onShare}
                className="p-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
                aria-label="Share results"
              >
                <Share2 className="h-4 w-4" />
              </button>
            )}
            {onDownload && (
              <button
                onClick={onDownload}
                className="p-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
                aria-label="Download results"
              >
                <Download className="h-4 w-4" />
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="p-6">
        {/* Credit Amount */}
        <div className="text-center mb-6">
          <p className="text-sm text-gray-600 mb-1">Estimated Federal Credit</p>
          <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
            {formatCurrency(federalCredit)}
          </p>
          <p className="text-sm text-gray-500 mt-1">
            Based on {formatCurrency(qreBreakdown.total)} in qualifying expenses
          </p>
        </div>

        {variant === 'full' && (
          <>
            {/* ROI Metrics */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <p className="text-2xl font-bold text-gray-900">{roi.roiMultiple}x</p>
                <p className="text-sm text-gray-600">Return on Investment</p>
              </div>
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <p className="text-2xl font-bold text-gray-900">{formatCurrency(roi.netBenefit)}</p>
                <p className="text-sm text-gray-600">Net Benefit</p>
              </div>
            </div>

            {/* Expense Breakdown */}
            <div className="space-y-3 mb-6">
              <h4 className="font-semibold text-gray-900 text-sm">Qualifying Expenses</h4>
              
              {qreBreakdown.wages > 0 && (
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">AI experimentation wages</span>
                  <span className="font-medium">{formatCurrency(qreBreakdown.wages)}</span>
                </div>
              )}
              
              {qreBreakdown.contractors > 0 && (
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Contractor costs (65%)</span>
                  <span className="font-medium">{formatCurrency(qreBreakdown.contractors)}</span>
                </div>
              )}
              
              {qreBreakdown.supplies > 0 && (
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Cloud & AI tools</span>
                  <span className="font-medium">{formatCurrency(qreBreakdown.supplies)}</span>
                </div>
              )}
              
              <div className="pt-3 border-t border-gray-200">
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-900">Total QREs</span>
                  <span className="font-bold">{formatCurrency(qreBreakdown.total)}</span>
                </div>
              </div>
            </div>
          </>
        )}

        {/* Service Info */}
        <div className="bg-blue-50 rounded-lg p-4">
          <div className="flex items-start gap-3">
            <FileText className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
            <div className="text-sm">
              <p className="font-semibold text-gray-900 mb-1">
                Professional Documentation Service
              </p>
              <p className="text-gray-600">
                IRS-compliant documentation for {formatCurrency(pricingTier.price)} flat fee.
                Delivered in 48 hours with audit support included.
              </p>
            </div>
          </div>
        </div>

        {/* Timestamp */}
        <p className="text-xs text-gray-400 text-center mt-4">
          Calculated on {new Date(result.timestamp).toLocaleDateString()}
        </p>
      </div>
    </div>
  );
};
```

**4. Create Mobile-Optimized Results (components/calculator/MobileResults.tsx):**
```typescript
/**
 * @file MobileResults.tsx
 * @description Mobile-optimized results display
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Ensures great experience on mobile devices
 * with touch-friendly interactions.
 */

import React from 'react';
import { motion } from 'framer-motion';
import { CalculationResult } from '../../types/calculation.types';
import { formatCurrency } from '../../utils/calculation.utils';
import { ArrowRight, TrendingUp } from 'lucide-react';

interface MobileResultsProps {
  result: CalculationResult;
  isBlurred: boolean;
  onGetStarted: () => void;
}

export const MobileResults: React.FC<MobileResultsProps> = ({
  result,
  isBlurred,
  onGetStarted
}) => {
  const { federalCredit, roi, pricingTier } = result;

  return (
    <div className="relative">
      {/* Blur overlay for mobile */}
      {isBlurred && (
        <div className="absolute inset-0 z-20 flex items-end">
          <motion.div
            initial={{ y: 100 }}
            animate={{ y: 0 }}
            className="bg-white rounded-t-3xl shadow-2xl p-6 w-full"
          >
            <div className="w-12 h-1 bg-gray-300 rounded-full mx-auto mb-6" />
            
            <h3 className="text-xl font-bold text-center mb-4">
              Your AI Work = Real Tax Savings
            </h3>
            
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 mb-6">
              <p className="text-sm text-gray-600 text-center mb-1">Estimated Credit</p>
              <p className="text-3xl font-bold text-center text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
                {formatCurrency(Math.round(federalCredit / 1000) * 1000)}+
              </p>
            </div>

            <button
              onClick={onGetStarted}
              className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-4 rounded-xl flex items-center justify-center group"
            >
              See Full Results
              <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
            </button>

            <p className="text-center text-xs text-gray-500 mt-4">
              Takes 2 minutes • No credit card
            </p>
          </motion.div>
        </div>
      )}

      {/* Main mobile results */}
      <div className={`${isBlurred ? 'blur-sm' : ''} transition-all duration-500`}>
        {/* Credit amount card */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-4">
          <h2 className="text-center text-sm font-semibold text-gray-600 uppercase tracking-wide mb-3">
            Federal R&D Tax Credit
          </h2>
          
          <div className="text-center mb-4">
            <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              {formatCurrency(federalCredit)}
            </p>
          </div>

          <div className="flex items-center justify-center gap-2 text-sm text-gray-600">
            <TrendingUp className="h-4 w-4 text-green-600" />
            <span>{roi.roiMultiple}x return on investment</span>
          </div>
        </div>

        {/* Quick stats */}
        <div className="grid grid-cols-2 gap-3 mb-4">
          <div className="bg-gray-50 rounded-xl p-4 text-center">
            <p className="text-2xl font-bold text-gray-900">{formatCurrency(roi.netBenefit)}</p>
            <p className="text-xs text-gray-600">Net Benefit</p>
          </div>
          <div className="bg-gray-50 rounded-xl p-4 text-center">
            <p className="text-2xl font-bold text-gray-900">{roi.breakEvenDays}</p>
            <p className="text-xs text-gray-600">Days to Break Even</p>
          </div>
        </div>

        {/* CTA button (visible after lead capture) */}
        {!isBlurred && (
          <button
            onClick={onGetStarted}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-4 rounded-xl mt-6"
          >
            Claim My ${formatCurrency(federalCredit)} Credit
          </button>
        )}
      </div>
    </div>
  );
};
```

**5. Create Results Export Utilities (utils/results-export.utils.ts):**
```typescript
/**
 * @file results-export.utils.ts
 * @description Utilities for sharing and exporting results
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 */

import { CalculationResult } from '../types/calculation.types';
import { formatCurrency } from './calculation.utils';

/**
 * Generate shareable text summary
 */
export const generateShareText = (
  result: CalculationResult,
  companyName?: string
): string => {
  const { federalCredit, qreBreakdown, roi } = result;
  
  let text = `R&D Tax Credit Estimate\n`;
  if (companyName) text += `${companyName}\n`;
  text += `\n`;
  text += `Federal Credit: ${formatCurrency(federalCredit)}\n`;
  text += `Qualifying Expenses: ${formatCurrency(qreBreakdown.total)}\n`;
  text += `ROI: ${roi.roiMultiple}x\n`;
  text += `Net Benefit: ${formatCurrency(roi.netBenefit)}\n`;
  text += `\n`;
  text += `Calculate your credit at SMBTaxCredits.com`;
  
  return text;
};

/**
 * Generate email body for sharing
 */
export const generateEmailBody = (
  result: CalculationResult,
  companyName?: string
): string => {
  const shareText = generateShareText(result, companyName);
  return encodeURIComponent(shareText);
};

/**
 * Generate CSV export
 */
export const generateCSVExport = (result: CalculationResult): string => {
  const rows = [
    ['Category', 'Amount'],
    ['Employee Wages', result.qreBreakdown.wages],
    ['Contractor Costs', result.qreBreakdown.contractors],
    ['Supplies & Cloud', result.qreBreakdown.supplies],
    ['Total QREs', result.qreBreakdown.total],
    ['Federal Credit', result.federalCredit],
    ['Service Cost', result.roi.serviceCost],
    ['Net Benefit', result.roi.netBenefit]
  ];
  
  return rows.map(row => row.join(',')).join('\n');
};

/**
 * Copy results to clipboard
 */
export const copyToClipboard = async (
  result: CalculationResult,
  companyName?: string
): Promise<boolean> => {
  try {
    const text = generateShareText(result, companyName);
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

/**
 * Generate results URL for sharing
 */
export const generateShareURL = (resultId: string): string => {
  const baseURL = window.location.origin;
  return `${baseURL}/results/${resultId}`;
};
```

CRITICAL: Add comprehensive documentation:
```javascript
/**
 * Results Display Architecture
 * 
 * CONVERSION STRATEGY:
 * - Blur effect creates curiosity gap
 * - Animated counting builds excitement
 * - ROI messaging emphasizes value
 * - Progressive disclosure maintains engagement
 * 
 * USER PSYCHOLOGY:
 * - "Aha moment" when seeing credit amount
 * - Trust signals reduce skepticism
 * - Urgency elements drive action
 * - Social proof builds confidence
 * 
 * MOBILE OPTIMIZATION:
 * - Touch-friendly tap targets
 * - Bottom sheet pattern for CTAs
 * - Condensed information hierarchy
 * - Smooth gesture animations
 * 
 * FEDERAL FOCUS:
 * - Only shows federal credit amount
 * - No state calculations displayed
 * - Simplifies user decision making
 * 
 * PERFORMANCE:
 * - Framer Motion for 60fps animations
 * - Lazy loading for breakdown details
 * - Optimized re-renders with memo
 * 
 * INTEGRATION:
 * - Receives data from calculation engine
 * - Triggers lead capture modal
 * - Feeds into payment flow
 * - Data saved after email capture
 * 
 * TODO: Add A/B testing for CTA copy
 * TODO: Implement social sharing features
 */
```