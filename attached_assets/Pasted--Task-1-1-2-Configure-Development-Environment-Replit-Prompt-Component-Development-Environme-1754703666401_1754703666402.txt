# Task 1.1.2: Configure Development Environment - Replit Prompt

## Component: Development Environment Configuration
**Reference**: rd-saas-replit-guide.md, additional-project-specs.md, final-missing-specs.md, rd-credit-file-structure.md

### Overview
Set up comprehensive development tooling, dependencies, and build configuration for the SMBTaxCredits.com R&D Tax Credit documentation platform. This establishes the foundation for consistent, high-quality code across the entire project.

### Technical Requirements
- **Dependencies**: Frontend and backend package management
- **Build Tools**: Webpack configuration for React, TypeScript compilation
- **Code Quality**: ESLint, Prettier, pre-commit hooks
- **Environment Management**: Development vs production configurations
- **Replit-Specific**: Proper configuration for Replit environment

### Implementation Prompt

"Configure a complete development environment for the SMBTaxCredits.com platform with separate frontend (React) and backend (Node.js/Express) configurations. Set up all necessary dependencies, linting, formatting, and build tools.

**1. Root Package.json Configuration:**
Create a root package.json with workspace configuration:

```json
{
  "name": "smbtaxcredits-platform",
  "version": "1.0.0",
  "description": "SMBTaxCredits.com - R&D Tax Credit Documentation Platform",
  "private": true,
  "workspaces": [
    "frontend",
    "backend"
  ],
  "scripts": {
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "cd backend && npm run dev",
    "client": "cd frontend && npm run dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "start": "NODE_ENV=production node backend/dist/app.js",
    "setup": "npm install && cd frontend && npm install && cd ../backend && npm install",
    "migrate": "cd backend && npm run migrate",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm test",
    "test:backend": "cd backend && npm test",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && npm run lint",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,css,md}\""
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "prettier": "^3.1.1",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
```

**2. Frontend Package.json (frontend/package.json):**
```json
{
  "name": "smbtaxcredits-frontend",
  "version": "1.0.0",
  "description": "SMBTaxCredits.com Frontend",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.1",
    "axios": "^1.6.2",
    "framer-motion": "^10.16.16",
    "react-icons": "^4.12.0",
    "@stripe/stripe-js": "^2.2.2",
    "react-hook-form": "^7.48.2",
    "date-fns": "^2.30.0",
    "recharts": "^2.10.3",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3",
    "vite": "^5.0.10",
    "vitest": "^1.1.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/jest-dom": "^6.1.6",
    "@testing-library/user-event": "^14.5.2"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "type-check": "tsc --noEmit"
  }
}
```

**3. Backend Package.json (backend/package.json):**
```json
{
  "name": "smbtaxcredits-backend",
  "version": "1.0.0",
  "description": "SMBTaxCredits.com Backend API",
  "private": true,
  "main": "dist/app.js",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "dotenv": "^16.3.1",
    "pg": "^8.11.3",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "stripe": "^14.10.0",
    "airtable": "^0.12.2",
    "axios": "^1.6.2",
    "@aws-sdk/client-s3": "^3.478.0",
    "@sendgrid/mail": "^8.1.0",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "winston": "^3.11.0",
    "node-cron": "^3.0.3",
    "multer": "^1.4.5-lts.1"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/node": "^20.10.5",
    "@types/cors": "^2.8.17",
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/pg": "^8.10.9",
    "@types/multer": "^1.4.11",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "eslint": "^8.56.0",
    "nodemon": "^3.0.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3",
    "jest": "^29.7.0",
    "@types/jest": "^29.5.11",
    "supertest": "^6.3.3",
    "@types/supertest": "^6.0.2"
  },
  "scripts": {
    "dev": "nodemon",
    "build": "tsc",
    "start": "node dist/app.js",
    "migrate": "ts-node src/migrations/run.ts",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint . --ext .ts --max-warnings 0",
    "type-check": "tsc --noEmit"
  }
}
```

**4. TypeScript Configuration Files:**

Frontend tsconfig.json (frontend/tsconfig.json):
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@components/*": ["src/components/*"],
      "@services/*": ["src/services/*"],
      "@utils/*": ["src/utils/*"],
      "@types/*": ["src/types/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

Backend tsconfig.json (backend/tsconfig.json):
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "commonjs",
    "lib": ["ES2022"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "node",
    "allowJs": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@controllers/*": ["src/controllers/*"],
      "@services/*": ["src/services/*"],
      "@models/*": ["src/models/*"],
      "@middleware/*": ["src/middleware/*"],
      "@utils/*": ["src/utils/*"],
      "@types/*": ["src/types/*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "tests"]
}
```

**5. ESLint Configuration:**

Frontend .eslintrc.cjs (frontend/.eslintrc.cjs):
```javascript
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'plugin:react/recommended',
    'prettier'
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    'react/react-in-jsx-scope': 'off',
    'react/prop-types': 'off',
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
  },
  settings: {
    react: {
      version: 'detect'
    }
  }
}
```

Backend .eslintrc.js (backend/.eslintrc.js):
```javascript
module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module',
  },
  env: {
    node: true,
    es2022: true,
    jest: true
  },
  rules: {
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    'no-console': ['warn', { allow: ['warn', 'error'] }],
  }
}
```

**6. Prettier Configuration (.prettierrc):**
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "bracketSpacing": true,
  "endOfLine": "lf"
}
```

**7. Tailwind Configuration (frontend/tailwind.config.js):**
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0fdf4',
          500: '#10B981',
          600: '#059669',
          700: '#047857',
        },
        secondary: {
          500: '#2563EB',
          600: '#1D4ED8',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
```

**8. Nodemon Configuration (backend/nodemon.json):**
```json
{
  "watch": ["src"],
  "ext": "ts,json",
  "ignore": ["src/**/*.spec.ts", "src/**/*.test.ts"],
  "exec": "ts-node -r tsconfig-paths/register ./src/app.ts"
}
```

**9. Vite Configuration (frontend/vite.config.ts):**
```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@services': path.resolve(__dirname, './src/services'),
      '@utils': path.resolve(__dirname, './src/utils'),
      '@types': path.resolve(__dirname, './src/types'),
    },
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
      },
    },
  },
});
```

**10. Git Configuration Files:**

.gitignore:
```
# Dependencies
node_modules/
.pnp
.pnp.js

# Production
dist/
build/

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*

# Testing
coverage/
.nyc_output

# IDE
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Temporary
tmp/
temp/
*.tmp

# Database
*.sqlite
*.db

# Uploads
uploads/
```

**11. Environment Variables Template (.env.example):**
```bash
# Application
NODE_ENV=development
APP_URL=http://localhost:3000
API_URL=http://localhost:5000

# Database
DATABASE_URL=postgresql://username:password@localhost:5432/smbtaxcredits

# Authentication
JWT_SECRET=your-super-secret-jwt-key-change-this

# Stripe
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Airtable
AIRTABLE_API_KEY=key...
AIRTABLE_BASE_ID=app...

# Make.com
MAKE_WEBHOOK_URL=https://hook.make.com/...
MAKE_API_KEY=...

# Claude API
CLAUDE_API_KEY=sk-ant-...

# Documint
DOCUMINT_API_KEY=...

# SendGrid
SENDGRID_API_KEY=SG...
SENDGRID_FROM_EMAIL=noreply@smbtaxcredits.com

# AWS S3
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...
AWS_S3_BUCKET=smbtaxcredits-documents
AWS_REGION=us-east-1

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
```

**12. Replit Configuration (.replit):**
```toml
run = "npm run dev"
entrypoint = "backend/src/app.ts"

[languages.typescript]
pattern = "**/*.{ts,tsx}"

[languages.javascript]
pattern = "**/*.{js,jsx}"

[nix]
channel = "stable-22_11"

[env]
NODE_ENV = "development"

[packager]
language = "nodejs"

[packager.features]
packageSearch = true
guessImports = true
enabledForHosting = false
```

CRITICAL: Add comprehensive documentation:
```javascript
/**
 * @file Development Environment Configuration
 * @description Complete setup for SMBTaxCredits.com development environment
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * @knowledgeBase rd-credit-file-structure.md, additional-project-specs.md
 * 
 * This configuration establishes:
 * - Separate frontend/backend workspaces
 * - TypeScript for type safety
 * - ESLint + Prettier for code quality
 * - Tailwind CSS for styling
 * - Vite for fast frontend builds
 * - Nodemon for backend hot reloading
 * - Jest/Vitest for testing
 * - Comprehensive git ignore patterns
 * 
 * INTEGRATION: All external services configured in .env
 * SECURITY: JWT secrets and API keys must be set before running
 * TODO: Add pre-commit hooks with Husky
 * TODO: Configure CI/CD pipeline
 */
```

This configuration provides a complete, production-ready development environment with proper tooling, linting, formatting, and build processes for both frontend and backend."