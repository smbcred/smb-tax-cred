# Task 1.2.2: Implement Responsive Design - Replit Prompt

## Component: Responsive Design Enhancement
**Reference**: rd-saas-replit-guide.md, SMBTaxCredits - Visual Brand Identity Guide.md, edge_case_copy_logic.md

### Overview
Enhance the SMBTaxCredits.com landing page with comprehensive mobile-first responsive design, ensuring perfect functionality across all devices. This implementation focuses on touch-friendly interactions, optimized layouts, and mobile-specific features.

### Technical Requirements
- **Dependencies**: React 18+, Tailwind CSS, react-responsive, react-intersection-observer
- **Breakpoints**: Mobile (< 640px), Tablet (640px - 1024px), Desktop (> 1024px)
- **Performance**: Lazy loading, optimized images, reduced JavaScript for mobile
- **Accessibility**: WCAG 2.1 AA compliance, touch targets ≥ 44px

### Implementation Prompt

"Enhance the existing SMBTaxCredits.com landing page with comprehensive responsive design features. Focus on mobile-first approach with touch-friendly interfaces and optimized performance.

**1. Create Responsive Navigation Component (components/navigation/ResponsiveNav.tsx):**
```typescript
/**
 * @file ResponsiveNav.tsx
 * @description Mobile-first responsive navigation with hamburger menu
 * @author SMBTaxCredits.com Team
 * @knowledgeBase rd-saas-replit-guide.md - Mobile navigation requirements
 */

import React, { useState, useEffect } from 'react';
import { FaBars, FaTimes } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';

const ResponsiveNav: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  // Handle scroll for navbar background
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Lock body scroll when mobile menu is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
  }, [isOpen]);

  return (
    <nav className={`
      fixed top-0 left-0 right-0 z-50 transition-all duration-300
      ${scrolled ? 'bg-white shadow-md' : 'bg-transparent'}
    `}>
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16 lg:h-20">
          {/* Logo */}
          <div className="flex-shrink-0">
            <a href="/" className="text-xl font-bold text-blue-600">
              SMBTaxCredits.com
            </a>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden lg:flex items-center space-x-8">
            <a href="#how-it-works" className="text-gray-700 hover:text-blue-600 transition">
              How It Works
            </a>
            <a href="#pricing" className="text-gray-700 hover:text-blue-600 transition">
              Pricing
            </a>
            <a href="#faq" className="text-gray-700 hover:text-blue-600 transition">
              FAQ
            </a>
            <a href="#resources" className="text-gray-700 hover:text-blue-600 transition">
              Resources
            </a>
            <button className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition">
              Start Your Estimate
            </button>
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsOpen(!isOpen)}
            className="lg:hidden p-2 rounded-md text-gray-700 hover:bg-gray-100 
                     focus:outline-none focus:ring-2 focus:ring-blue-600"
            aria-label={isOpen ? 'Close menu' : 'Open menu'}
          >
            {isOpen ? <FaTimes size={24} /> : <FaBars size={24} />}
          </button>
        </div>
      </div>

      {/* Mobile Menu Overlay */}
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setIsOpen(false)}
              className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40"
            />

            {/* Slide-in Menu */}
            <motion.div
              initial={{ x: '100%' }}
              animate={{ x: 0 }}
              exit={{ x: '100%' }}
              transition={{ type: 'tween', duration: 0.3 }}
              className="lg:hidden fixed right-0 top-0 bottom-0 w-80 max-w-full 
                       bg-white shadow-xl z-50 overflow-y-auto"
            >
              <div className="p-6">
                <button
                  onClick={() => setIsOpen(false)}
                  className="absolute top-6 right-6 p-2 rounded-md hover:bg-gray-100"
                  aria-label="Close menu"
                >
                  <FaTimes size={24} />
                </button>

                <div className="mt-12 space-y-6">
                  <a href="#how-it-works" 
                     onClick={() => setIsOpen(false)}
                     className="block text-lg font-medium text-gray-900 hover:text-blue-600">
                    How It Works
                  </a>
                  <a href="#pricing" 
                     onClick={() => setIsOpen(false)}
                     className="block text-lg font-medium text-gray-900 hover:text-blue-600">
                    Pricing
                  </a>
                  <a href="#faq" 
                     onClick={() => setIsOpen(false)}
                     className="block text-lg font-medium text-gray-900 hover:text-blue-600">
                    FAQ
                  </a>
                  <a href="#resources" 
                     onClick={() => setIsOpen(false)}
                     className="block text-lg font-medium text-gray-900 hover:text-blue-600">
                    Resources
                  </a>
                  <button 
                    onClick={() => setIsOpen(false)}
                    className="w-full bg-blue-600 text-white py-3 rounded-lg 
                             hover:bg-blue-700 transition mt-8"
                  >
                    Start Your Estimate
                  </button>
                </div>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </nav>
  );
};

export default ResponsiveNav;
```

**2. Create Mobile-Optimized Hero Section (components/sections/ResponsiveHero.tsx):**
```typescript
/**
 * @description Responsive hero section with mobile optimizations
 * INTEGRATION: Uses intersection observer for performance
 */

const ResponsiveHero: React.FC = () => {
  return (
    <section className="relative pt-20 lg:pt-24 pb-16 lg:pb-24 px-4">
      <div className="container mx-auto">
        <div className="flex flex-col lg:flex-row items-center">
          {/* Text Content */}
          <div className="w-full lg:w-1/2 text-center lg:text-left mb-12 lg:mb-0">
            <h1 className="text-3xl sm:text-4xl lg:text-5xl xl:text-6xl 
                         font-bold text-gray-900 leading-tight mb-6">
              Claim your federal R&D tax credit—
              <span className="text-blue-600 block sm:inline">without the runaround.</span>
            </h1>
            
            <p className="text-lg sm:text-xl text-gray-600 mb-8 max-w-2xl mx-auto lg:mx-0">
              Flat-fee, self-serve documentation for amended 2022–2024 and current 2025 
              filings—IRS-aligned and CPA-ready.
            </p>
            
            {/* Mobile-optimized CTA buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start">
              <button className="w-full sm:w-auto bg-blue-600 text-white px-8 py-4 
                               rounded-lg text-lg font-semibold hover:bg-blue-700 
                               transition transform hover:scale-105 
                               focus:outline-none focus:ring-4 focus:ring-blue-500/50">
                Start your free estimate
              </button>
              
              <a href="#how-it-works" 
                 className="w-full sm:w-auto text-blue-600 px-8 py-4 rounded-lg 
                          text-lg font-semibold hover:bg-blue-50 transition 
                          text-center inline-flex items-center justify-center">
                See how it works
                <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                        d="M9 5l7 7-7 7" />
                </svg>
              </a>
            </div>
          </div>
          
          {/* Hero Image/Illustration - Hidden on small mobile */}
          <div className="w-full lg:w-1/2 relative hidden sm:block">
            <img 
              src="/hero-illustration.svg" 
              alt="R&D Tax Credit Process"
              className="w-full h-auto max-w-lg mx-auto"
              loading="eager"
            />
          </div>
        </div>
      </div>
    </section>
  );
};
```

**3. Create Touch-Friendly Calculator Steps (components/calculator/MobileCalculator.tsx):**
```typescript
/**
 * @description Mobile-optimized calculator with swipe gestures
 * CHANGE: Added swipe navigation for mobile users
 */

import { useSwipeable } from 'react-swipeable';

const MobileCalculator: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  
  // Swipe handlers for mobile navigation
  const handlers = useSwipeable({
    onSwipedLeft: () => {
      if (currentStep < 4) setCurrentStep(currentStep + 1);
    },
    onSwipedRight: () => {
      if (currentStep > 1) setCurrentStep(currentStep - 1);
    },
    preventDefaultTouchmoveEvent: true,
    trackTouch: true
  });

  return (
    <div {...handlers} className="touch-pan-y">
      {/* Progress Indicator - Mobile Optimized */}
      <div className="flex justify-between mb-8 px-4">
        {[1, 2, 3, 4].map((step) => (
          <div key={step} className="flex-1">
            <div className={`h-2 rounded-full mx-1 transition-all
              ${step <= currentStep ? 'bg-blue-600' : 'bg-gray-200'}`} 
            />
            <p className="text-xs text-center mt-2 hidden sm:block">
              Step {step}
            </p>
          </div>
        ))}
      </div>

      {/* Step Content with Touch-Friendly Inputs */}
      <div className="px-4">
        {currentStep === 1 && (
          <div className="space-y-4">
            <h3 className="text-xl font-semibold mb-4">Select Your Business Type</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {['SaaS/Software', 'E-commerce', 'Manufacturing', 'Consulting'].map((type) => (
                <button
                  key={type}
                  className="p-6 border-2 border-gray-200 rounded-lg 
                           hover:border-blue-600 hover:bg-blue-50 
                           transition min-h-[60px] text-left
                           focus:outline-none focus:ring-2 focus:ring-blue-600"
                >
                  <span className="font-medium">{type}</span>
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Mobile Navigation Buttons */}
        <div className="flex justify-between mt-8 gap-4">
          <button
            onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
            disabled={currentStep === 1}
            className="flex-1 py-3 px-6 border border-gray-300 rounded-lg
                     disabled:opacity-50 disabled:cursor-not-allowed
                     hover:bg-gray-50 transition"
          >
            Back
          </button>
          <button
            onClick={() => setCurrentStep(Math.min(4, currentStep + 1))}
            className="flex-1 py-3 px-6 bg-blue-600 text-white rounded-lg
                     hover:bg-blue-700 transition"
          >
            {currentStep === 4 ? 'See Results' : 'Next'}
          </button>
        </div>

        {/* Swipe Hint for Mobile */}
        <p className="text-center text-sm text-gray-500 mt-4 sm:hidden">
          Swipe left or right to navigate
        </p>
      </div>
    </div>
  );
};
```

**4. Create Responsive Grid Components (components/layout/ResponsiveGrid.tsx):**
```typescript
/**
 * @description Reusable responsive grid layouts
 */

export const BenefitsGrid: React.FC = () => {
  const benefits = [
    { icon: FaShieldAlt, title: 'IRS-Compliant by Design', description: '...' },
    { icon: FaDollarSign, title: 'Flat-Fee Transparency', description: '...' },
    // ... more benefits
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
      {benefits.map((benefit, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ delay: index * 0.1 }}
          className="bg-white p-6 lg:p-8 rounded-xl shadow-md hover:shadow-lg 
                   transition-shadow duration-300"
        >
          <div className="flex items-start space-x-4">
            <div className="flex-shrink-0">
              <benefit.icon className="w-8 h-8 text-blue-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-2">{benefit.title}</h3>
              <p className="text-gray-600 text-sm lg:text-base">{benefit.description}</p>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
};
```

**5. Create Mobile-Optimized Forms (components/forms/MobileForm.tsx):**
```typescript
/**
 * @description Touch-friendly form inputs with proper spacing
 */

export const MobileOptimizedInput: React.FC<InputProps> = ({ 
  label, 
  type = 'text', 
  error,
  ...props 
}) => {
  return (
    <div className="mb-6">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label}
      </label>
      <input
        type={type}
        className={`
          w-full px-4 py-3 border rounded-lg text-base
          focus:ring-2 focus:ring-blue-600 focus:border-transparent
          transition-colors duration-200
          ${error ? 'border-red-500' : 'border-gray-300'}
          ${type === 'number' ? 'text-right' : ''}
        `}
        style={{ fontSize: '16px' }} // Prevents zoom on iOS
        {...props}
      />
      {error && (
        <p className="mt-1 text-sm text-red-600">{error}</p>
      )}
    </div>
  );
};
```

**6. Create Responsive Pricing Cards (components/pricing/ResponsivePricing.tsx):**
```typescript
/**
 * @description Mobile-friendly pricing display
 */

const ResponsivePricing: React.FC = () => {
  return (
    <div className="overflow-x-auto pb-4">
      <div className="flex flex-col lg:flex-row lg:justify-center gap-6 
                    min-w-full lg:min-w-0 px-4 lg:px-0">
        {pricingTiers.map((tier, index) => (
          <div
            key={index}
            className={`
              flex-shrink-0 w-full lg:w-80 
              bg-white rounded-xl shadow-lg 
              ${tier.featured ? 'ring-2 ring-blue-600' : ''}
            `}
          >
            {tier.featured && (
              <div className="bg-blue-600 text-white text-center py-2 
                            rounded-t-xl text-sm font-medium">
                Most Popular
              </div>
            )}
            
            <div className="p-6 lg:p-8">
              <h3 className="text-2xl font-bold mb-2">{tier.name}</h3>
              <p className="text-gray-600 mb-4">{tier.creditRange}</p>
              
              <div className="mb-6">
                <span className="text-4xl font-bold">${tier.price}</span>
                <span className="text-gray-600 ml-2">one-time</span>
              </div>
              
              <button className={`
                w-full py-3 rounded-lg font-semibold transition
                ${tier.featured 
                  ? 'bg-blue-600 text-white hover:bg-blue-700' 
                  : 'bg-gray-100 text-gray-900 hover:bg-gray-200'}
              `}>
                Get Started
              </button>
              
              <ul className="mt-6 space-y-3">
                {tier.features.map((feature, i) => (
                  <li key={i} className="flex items-start">
                    <FaCheck className="w-5 h-5 text-green-500 mr-2 flex-shrink-0 mt-0.5" />
                    <span className="text-sm text-gray-700">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
```

**7. Create Performance Optimizations (utils/performance.tsx):**
```typescript
/**
 * @description Mobile performance optimizations
 */

// Lazy load images with blur placeholder
export const OptimizedImage: React.FC<ImageProps> = ({ 
  src, 
  alt, 
  className,
  priority = false 
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  
  return (
    <div className={`relative ${className}`}>
      {/* Blur placeholder */}
      <div 
        className={`absolute inset-0 bg-gray-200 animate-pulse 
                   ${isLoaded ? 'opacity-0' : 'opacity-100'} 
                   transition-opacity duration-300`}
      />
      
      <img
        src={src}
        alt={alt}
        loading={priority ? 'eager' : 'lazy'}
        onLoad={() => setIsLoaded(true)}
        className={`${className} ${isLoaded ? 'opacity-100' : 'opacity-0'} 
                   transition-opacity duration-300`}
      />
    </div>
  );
};

// Responsive video embed
export const ResponsiveVideo: React.FC<VideoProps> = ({ videoId }) => {
  return (
    <div className="relative pb-[56.25%] h-0 overflow-hidden rounded-lg">
      <iframe
        src={`https://www.youtube.com/embed/${videoId}`}
        title="SMBTaxCredits.com Explainer"
        className="absolute top-0 left-0 w-full h-full"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
      />
    </div>
  );
};
```

**8. Create Mobile-Specific Utilities (utils/mobile.ts):**
```typescript
/**
 * @description Mobile detection and utilities
 */

export const isMobile = () => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  );
};

export const useMobileDetect = () => {
  const [isMobileDevice, setIsMobileDevice] = useState(false);
  
  useEffect(() => {
    setIsMobileDevice(isMobile());
    
    const handleResize = () => {
      setIsMobileDevice(window.innerWidth < 768);
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  return isMobileDevice;
};

// Viewport height fix for mobile browsers
export const useViewportHeight = () => {
  useEffect(() => {
    const setViewportHeight = () => {
      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);
    };
    
    setViewportHeight();
    window.addEventListener('resize', setViewportHeight);
    
    return () => window.removeEventListener('resize', setViewportHeight);
  }, []);
};
```

**9. Update Global Styles (styles/responsive.css):**
```css
/* Mobile-first responsive utilities */

/* Use CSS custom property for viewport height */
.h-screen-mobile {
  height: 100vh;
  height: calc(var(--vh, 1vh) * 100);
}

/* Ensure touch targets are at least 44px */
button, a, input, select, textarea {
  min-height: 44px;
}

/* Prevent horizontal scroll on mobile */
html, body {
  overflow-x: hidden;
  -webkit-overflow-scrolling: touch;
}

/* Smooth scrolling for anchor links */
html {
  scroll-behavior: smooth;
}

/* Disable hover effects on touch devices */
@media (hover: none) {
  .hover\\:bg-blue-50:hover {
    background-color: transparent;
  }
}

/* Optimize font sizes for mobile */
@media (max-width: 640px) {
  html {
    font-size: 16px;
  }
  
  /* Prevent zoom on input focus (iOS) */
  input, select, textarea {
    font-size: 16px !important;
  }
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
}
```

**10. Create Responsive Testing Checklist Component:**
```typescript
/**
 * @description Development tool for responsive testing
 * TODO: Remove before production
 */

const ResponsiveDebugger: React.FC = () => {
  if (process.env.NODE_ENV === 'production') return null;
  
  return (
    <div className="fixed bottom-4 right-4 bg-black text-white p-2 rounded z-50">
      <div className="text-xs">
        <span className="sm:hidden">XS</span>
        <span className="hidden sm:inline md:hidden">SM</span>
        <span className="hidden md:inline lg:hidden">MD</span>
        <span className="hidden lg:inline xl:hidden">LG</span>
        <span className="hidden xl:inline">XL</span>
      </div>
    </div>
  );
};
```

CRITICAL: Add comprehensive documentation:
```javascript
/**
 * Responsive Design Implementation
 * 
 * BREAKPOINTS:
 * - Mobile: < 640px
 * - Tablet: 640px - 1024px  
 * - Desktop: > 1024px
 * 
 * MOBILE OPTIMIZATIONS:
 * - Touch targets minimum 44px
 * - Swipe gestures for calculator
 * - Optimized images with lazy loading
 * - Reduced JavaScript bundle for mobile
 * - Fixed viewport height issues
 * 
 * PERFORMANCE:
 * - Images lazy loaded below fold
 * - CSS critical path inlined
 * - JavaScript code split by route
 * - Service worker for offline support
 * 
 * ACCESSIBILITY:
 * - ARIA labels on all interactive elements
 * - Focus visible states
 * - Keyboard navigation support
 * - Screen reader announcements
 * 
 * TESTING: Use ResponsiveDebugger component in development
 * TODO: Add gesture tutorials for first-time mobile users
 * TODO: Implement offline mode for poor connections
 */
```"