# Task 1.3.1: Build Calculator UI Component - Replit Prompt

## Component: Interactive R&D Tax Credit Calculator UI
**KB References**: 
- system-architecture-explanation.md → Calculator Component & 4-Step Flow
- additional-project-specs.md → UI Requirements & Input Fields
- user_archetype_profiles.md → User Psychology & Friction Reduction
- Complete User Experience Flow.md → Calculator Flow & Progressive Disclosure
- rd-credit-file-structure.md → Component Organization

**Business Context**: Guides SMBs through a simple 4-step process to identify their AI experimentation work (custom GPTs, chatbot tuning, automation testing) and calculate potential federal R&D tax credits, creating immediate value recognition.

### Replit Prompt

"Create an intuitive 4-step calculator UI for businesses using AI tools to claim R&D tax credits:

1. Include examples: agencies building custom GPTs, e-commerce tuning chatbots, clinics improving intake bots
2. Use Grade 7-9 reading level with clear, action-oriented labels
3. Show progress indicator and smooth step transitions
4. Real-time calculation updates using the calculation engine hook
5. Mobile-responsive with touch-friendly controls
6. Federal focus only - no state selections needed
7. Reduce friction with smart defaults and helpful tooltips
8. Celebrate qualifying activities to build confidence

Key example to highlight: Marketing agency spent 100 hours over 3 months refining proposal-writing GPT, testing different prompts and measuring time saved

The calculator should feel like a helpful guide, not a tax form, making users realize their everyday AI experiments have real value."

**1. Create Main Calculator Component (components/calculator/CalculatorFlow.tsx):**
```typescript
/**
 * @file CalculatorFlow.tsx
 * @description 4-step R&D tax credit calculator for AI-forward SMBs
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * @knowledgeBase 
 * - system-architecture-explanation.md
 * - user_archetype_profiles.md
 * - Complete User Experience Flow.md
 * 
 * Guides users through discovering their R&D tax credit eligibility
 * by focusing on relatable AI experimentation activities rather
 * than complex tax terminology.
 * 
 * EXAMPLES:
 * - Agency tested 50+ prompt variations for proposal GPT
 * - E-commerce A/B tested chatbot responses for 2 months
 * - Restaurant refined reservation bot to reduce no-shows
 * 
 * BUSINESS RULES:
 * - Minimum 1 technical employee or contractor required
 * - Must select at least 1 qualifying activity
 * - All amounts in annual USD
 * - Federal calculations only
 * 
 * TODO: Add activity-specific expense suggestions
 * TODO: Implement smart defaults based on business type
 */

import React, { useState, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronRight, 
  ChevronLeft, 
  Sparkles,
  HelpCircle,
  AlertCircle
} from 'lucide-react';
import { useRealTimeCalculation } from '../../hooks/useRealTimeCalculation';
import { BusinessTypeStep } from './steps/BusinessTypeStep';
import { QualifyingActivitiesStep } from './steps/QualifyingActivitiesStep';
import { ExpenseInputStep } from './steps/ExpenseInputStep';
import { ResultsDisplay } from './ResultsDisplay';
import { ProgressIndicator } from './ProgressIndicator';
import { ValidationService } from '../../services/calculation/validation.service';
import type { CalculationInput, BusinessType, QualifyingActivity } from '../../types/calculation.types';

interface CalculatorFlowProps {
  onComplete?: (result: any) => void;
  onLeadCapture?: () => void;
}

export const CalculatorFlow: React.FC<CalculatorFlowProps> = ({
  onComplete,
  onLeadCapture
}) => {
  // Step management
  const [currentStep, setCurrentStep] = useState(1);
  const [visitedSteps, setVisitedSteps] = useState<Set<number>>(new Set([1]));
  const [isTransitioning, setIsTransitioning] = useState(false);

  // Form data - integrated with calculation hook
  const {
    input,
    result,
    isCalculating,
    error,
    updateInput,
    updateField,
    hasQualifyingExpenses
  } = useRealTimeCalculation({
    businessType: 'software',
    totalEmployees: 0,
    technicalEmployees: 0,
    averageTechnicalSalary: 75000, // Smart default
    rdAllocationPercentage: 100,
    contractorCosts: 0,
    suppliesCosts: 0,
    cloudCosts: 0,
    softwareCosts: 0,
    qualifyingActivities: []
  });

  // Validation state
  const [stepErrors, setStepErrors] = useState<Record<number, string[]>>({});

  // Step configuration
  const steps = [
    { number: 1, title: 'Business Type', subtitle: 'Tell us about your company' },
    { number: 2, title: 'AI Activities', subtitle: 'Your experimentation work' },
    { number: 3, title: 'Team & Costs', subtitle: 'People and expenses' },
    { number: 4, title: 'Your Results', subtitle: 'See your tax savings' }
  ];

  // Navigation handlers
  const goToStep = useCallback((step: number) => {
    if (step < 1 || step > 4 || isTransitioning) return;
    
    setIsTransitioning(true);
    setCurrentStep(step);
    setVisitedSteps(prev => new Set([...prev, step]));
    
    setTimeout(() => setIsTransitioning(false), 300);
  }, [isTransitioning]);

  const goNext = useCallback(() => {
    if (currentStep < 4 && validateCurrentStep()) {
      goToStep(currentStep + 1);
    }
  }, [currentStep, goToStep]);

  const goPrevious = useCallback(() => {
    if (currentStep > 1) {
      goToStep(currentStep - 1);
    }
  }, [currentStep, goToStep]);

  // Validation
  const validateCurrentStep = useCallback((): boolean => {
    const errors: string[] = [];

    switch (currentStep) {
      case 1:
        // Business type is always selected
        break;
        
      case 2:
        if (input.qualifyingActivities.length === 0) {
          errors.push('Please select at least one AI experimentation activity');
        }
        break;
        
      case 3:
        if (!hasQualifyingExpenses) {
          errors.push('Please enter employee, contractor, or supply costs');
        }
        
        const validationErrors = ValidationService.validateCalculationInput(input);
        const criticalErrors = validationErrors
          .filter(e => e.severity === 'error')
          .map(e => e.message);
        
        errors.push(...criticalErrors);
        break;
    }

    setStepErrors(prev => ({ ...prev, [currentStep]: errors }));
    return errors.length === 0;
  }, [currentStep, input, hasQualifyingExpenses]);

  // Auto-advance from step 3 when valid
  useEffect(() => {
    if (currentStep === 3 && hasQualifyingExpenses && result && !error) {
      // Small delay to show the calculation happening
      const timer = setTimeout(() => {
        if (validateCurrentStep()) {
          goToStep(4);
        }
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [currentStep, hasQualifyingExpenses, result, error, validateCurrentStep, goToStep]);

  // Keyboard navigation
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === 'Enter' && currentStep < 4) {
        goNext();
      } else if (e.key === 'Escape' && currentStep > 1) {
        goPrevious();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [currentStep, goNext, goPrevious]);

  return (
    <div className="max-w-4xl mx-auto">
      {/* Header with progress */}
      <div className="mb-8">
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Calculate Your R&D Tax Credit
          </h1>
          <p className="text-lg text-gray-600">
            See how your AI experiments translate to tax savings
          </p>
        </div>
        
        <ProgressIndicator
          currentStep={currentStep}
          totalSteps={4}
          onStepClick={goToStep}
          visitedSteps={visitedSteps}
        />
      </div>

      {/* Step content with animations */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, x: currentStep > 1 ? 20 : -20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: currentStep > 1 ? -20 : 20 }}
          transition={{ duration: 0.3 }}
        >
          {/* Step 1: Business Type */}
          {currentStep === 1 && (
            <BusinessTypeStep
              value={input.businessType}
              onChange={(type) => updateField('businessType', type)}
              onNext={goNext}
            />
          )}

          {/* Step 2: Qualifying Activities */}
          {currentStep === 2 && (
            <QualifyingActivitiesStep
              selectedActivities={input.qualifyingActivities}
              onChange={(activities) => updateField('qualifyingActivities', activities)}
              businessType={input.businessType}
              onNext={goNext}
              onBack={goPrevious}
            />
          )}

          {/* Step 3: Expense Inputs */}
          {currentStep === 3 && (
            <ExpenseInputStep
              input={input}
              onChange={updateInput}
              errors={stepErrors[3] || []}
              isCalculating={isCalculating}
              businessType={input.businessType}
              onNext={goNext}
              onBack={goPrevious}
            />
          )}

          {/* Step 4: Results */}
          {currentStep === 4 && (
            <div>
              <ResultsDisplay
                result={result}
                isBlurred={true}
                onGetStarted={onLeadCapture}
              />
              
              <div className="mt-6 flex justify-center">
                <button
                  onClick={goPrevious}
                  className="text-gray-600 hover:text-gray-800 flex items-center gap-2"
                >
                  <ChevronLeft className="h-5 w-5" />
                  Adjust my inputs
                </button>
              </div>
            </div>
          )}
        </motion.div>
      </AnimatePresence>

      {/* Error display */}
      {error && currentStep === 3 && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3"
        >
          <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
          <div className="text-sm text-red-700">
            <p className="font-semibold">Calculation Error</p>
            <p>{error.message}</p>
          </div>
        </motion.div>
      )}

      {/* Help text footer */}
      <div className="mt-12 text-center text-sm text-gray-500">
        <p>All calculations based on federal R&D tax credit rules</p>
        <p className="mt-1">
          Questions? <button className="text-blue-600 hover:underline">Chat with us</button>
        </p>
      </div>
    </div>
  );
};
```

**2. Create Business Type Selection Step (components/calculator/steps/BusinessTypeStep.tsx):**
```typescript
/**
 * @file BusinessTypeStep.tsx
 * @description Step 1: Business type selection with visual cards
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Uses familiar business categories that resonate with
 * SMBs doing AI experimentation work.
 */

import React from 'react';
import { motion } from 'framer-motion';
import { 
  Code, 
  ShoppingCart, 
  Briefcase, 
  Heart, 
  Utensils,
  Factory,
  Layers,
  Building
} from 'lucide-react';
import { BusinessType } from '../../../types/calculation.types';

interface BusinessTypeStepProps {
  value: BusinessType;
  onChange: (type: BusinessType) => void;
  onNext: () => void;
}

interface BusinessOption {
  value: BusinessType;
  label: string;
  description: string;
  icon: React.ReactNode;
  examples: string[];
}

const businessOptions: BusinessOption[] = [
  {
    value: 'software',
    label: 'Software & SaaS',
    description: 'Building digital products',
    icon: <Code className="h-6 w-6" />,
    examples: ['Custom GPT development', 'AI feature testing']
  },
  {
    value: 'ecommerce',
    label: 'E-commerce',
    description: 'Online retail & marketplaces',
    icon: <ShoppingCart className="h-6 w-6" />,
    examples: ['Product recommendation AI', 'Chatbot support']
  },
  {
    value: 'agency',
    label: 'Agency & Creative',
    description: 'Marketing & design services',
    icon: <Briefcase className="h-6 w-6" />,
    examples: ['Content generation tools', 'Proposal automation']
  },
  {
    value: 'consulting',
    label: 'Consulting',
    description: 'Professional services',
    icon: <Building className="h-6 w-6" />,
    examples: ['Analysis automation', 'Report generation']
  },
  {
    value: 'healthcare',
    label: 'Healthcare',
    description: 'Medical & wellness',
    icon: <Heart className="h-6 w-6" />,
    examples: ['Intake bot optimization', 'Scheduling AI']
  },
  {
    value: 'restaurant',
    label: 'Restaurant & Hospitality',
    description: 'Food service & hotels',
    icon: <Utensils className="h-6 w-6" />,
    examples: ['Reservation assistant', 'Review responses']
  },
  {
    value: 'manufacturing',
    label: 'Manufacturing',
    description: 'Production & logistics',
    icon: <Factory className="h-6 w-6" />,
    examples: ['Quality control AI', 'Process optimization']
  },
  {
    value: 'services',
    label: 'Other Services',
    description: 'General service businesses',
    icon: <Layers className="h-6 w-6" />,
    examples: ['Customer service AI', 'Workflow automation']
  }
];

export const BusinessTypeStep: React.FC<BusinessTypeStepProps> = ({
  value,
  onChange,
  onNext
}) => {
  const handleSelect = (type: BusinessType) => {
    onChange(type);
    // Auto-advance after selection
    setTimeout(onNext, 300);
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          What type of business do you run?
        </h2>
        <p className="text-gray-600">
          We'll customize examples to your industry
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {businessOptions.map((option) => (
          <motion.button
            key={option.value}
            onClick={() => handleSelect(option.value)}
            className={`
              relative p-6 rounded-xl border-2 text-left transition-all
              ${value === option.value
                ? 'border-blue-600 bg-blue-50'
                : 'border-gray-200 hover:border-gray-300 bg-white'
              }
            `}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {/* Selected indicator */}
            {value === option.value && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute top-4 right-4 w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center"
              >
                <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              </motion.div>
            )}

            <div className="space-y-3">
              <div className={`
                inline-flex p-3 rounded-lg
                ${value === option.value ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}
              `}>
                {option.icon}
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-900">
                  {option.label}
                </h3>
                <p className="text-sm text-gray-600 mt-1">
                  {option.description}
                </p>
              </div>

              <div className="text-xs text-gray-500">
                <p className="font-medium mb-1">Common AI uses:</p>
                <ul className="space-y-0.5">
                  {option.examples.map((example, idx) => (
                    <li key={idx}>• {example}</li>
                  ))}
                </ul>
              </div>
            </div>
          </motion.button>
        ))}
      </div>

      {/* Navigation */}
      <div className="flex justify-between items-center pt-4">
        <div className="text-sm text-gray-500">
          Step 1 of 4
        </div>
        
        {value && (
          <motion.button
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            onClick={onNext}
            className="flex items-center gap-2 text-blue-600 hover:text-blue-700 font-medium"
          >
            Continue
            <ChevronRight className="h-5 w-5" />
          </motion.button>
        )}
      </div>
    </div>
  );
};
```

**3. Create Qualifying Activities Step (components/calculator/steps/QualifyingActivitiesStep.tsx):**
```typescript
/**
 * @file QualifyingActivitiesStep.tsx
 * @description Step 2: Select AI experimentation activities
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Helps users identify their qualifying R&D work using
 * relatable AI experimentation examples.
 */

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronRight, 
  ChevronLeft,
  Sparkles,
  Bot,
  Zap,
  BarChart,
  FileText,
  Cog,
  HelpCircle,
  CheckCircle
} from 'lucide-react';
import { QualifyingActivity, BusinessType } from '../../../types/calculation.types';

interface QualifyingActivitiesStepProps {
  selectedActivities: QualifyingActivity[];
  onChange: (activities: QualifyingActivity[]) => void;
  businessType: BusinessType;
  onNext: () => void;
  onBack: () => void;
}

interface ActivityOption {
  value: QualifyingActivity;
  label: string;
  description: string;
  icon: React.ReactNode;
  examples: Record<BusinessType, string>;
}

const activityOptions: ActivityOption[] = [
  {
    value: 'custom_gpt',
    label: 'Custom GPT Development',
    description: 'Built specialized AI assistants for specific tasks',
    icon: <Bot className="h-5 w-5" />,
    examples: {
      software: 'Code review assistant with custom rules',
      ecommerce: 'Product description writer with brand voice',
      agency: 'Proposal generator with client data',
      consulting: 'Research summarizer for reports',
      healthcare: 'Patient FAQ responder',
      restaurant: 'Menu description creator',
      manufacturing: 'Safety protocol assistant',
      services: 'Service quote generator',
      other: 'Task-specific AI assistant'
    }
  },
  {
    value: 'prompt_engineering',
    label: 'Prompt Engineering & Testing',
    description: 'Refined prompts through iterative testing',
    icon: <FileText className="h-5 w-5" />,
    examples: {
      software: 'Optimized prompts for bug descriptions',
      ecommerce: 'Tested product recommendation prompts',
      agency: 'Refined creative brief prompts',
      consulting: 'Improved analysis prompts',
      healthcare: 'Tuned symptom checker prompts',
      restaurant: 'Perfected review response prompts',
      manufacturing: 'Enhanced quality report prompts',
      services: 'Optimized customer inquiry prompts',
      other: 'Systematic prompt improvements'
    }
  },
  {
    value: 'chatbot_tuning',
    label: 'Chatbot Optimization',
    description: 'Improved chatbot accuracy and responses',
    icon: <Sparkles className="h-5 w-5" />,
    examples: {
      software: 'Support bot with better error handling',
      ecommerce: 'Shopping assistant with cart recovery',
      agency: 'Lead qualifier with scoring logic',
      consulting: 'Appointment scheduler refinements',
      healthcare: 'Intake bot with routing rules',
      restaurant: 'Reservation bot reducing no-shows',
      manufacturing: 'Order status bot improvements',
      services: 'FAQ bot with escalation logic',
      other: 'Customer service bot enhancements'
    }
  },
  {
    value: 'workflow_automation',
    label: 'AI Workflow Automation',
    description: 'Created AI-powered automation sequences',
    icon: <Zap className="h-5 w-5" />,
    examples: {
      software: 'Automated ticket classification',
      ecommerce: 'AI-driven inventory alerts',
      agency: 'Content approval workflows',
      consulting: 'Document processing pipelines',
      healthcare: 'Referral routing automation',
      restaurant: 'Review monitoring workflows',
      manufacturing: 'Quality check automation',
      services: 'Job dispatch optimization',
      other: 'Multi-step AI workflows'
    }
  },
  {
    value: 'data_analysis',
    label: 'AI Analysis Tools',
    description: 'Developed AI-powered analysis systems',
    icon: <BarChart className="h-5 w-5" />,
    examples: {
      software: 'Code quality analyzer',
      ecommerce: 'Sales pattern detector',
      agency: 'Campaign performance analyzer',
      consulting: 'Market trend analyzer',
      healthcare: 'Patient outcome predictor',
      restaurant: 'Peak time optimizer',
      manufacturing: 'Defect pattern analyzer',
      services: 'Customer churn predictor',
      other: 'Business intelligence tools'
    }
  },
  {
    value: 'process_improvement',
    label: 'Process Optimization with AI',
    description: 'Used AI to improve business processes',
    icon: <Cog className="h-5 w-5" />,
    examples: {
      software: 'AI code review process',
      ecommerce: 'AI-enhanced fulfillment',
      agency: 'AI project management',
      consulting: 'AI research methods',
      healthcare: 'AI appointment optimization',
      restaurant: 'AI staff scheduling',
      manufacturing: 'AI production planning',
      services: 'AI route optimization',
      other: 'AI-driven improvements'
    }
  }
];

export const QualifyingActivitiesStep: React.FC<QualifyingActivitiesStepProps> = ({
  selectedActivities,
  onChange,
  businessType,
  onNext,
  onBack
}) => {
  const [showTooltip, setShowTooltip] = useState<string | null>(null);

  const toggleActivity = (activity: QualifyingActivity) => {
    if (selectedActivities.includes(activity)) {
      onChange(selectedActivities.filter(a => a !== activity));
    } else {
      onChange([...selectedActivities, activity]);
    }
  };

  const canContinue = selectedActivities.length > 0;

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Which AI experiments have you worked on?
        </h2>
        <p className="text-gray-600">
          Select all that apply - even failed attempts count!
        </p>
      </div>

      {/* Activity selection grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {activityOptions.map((option) => {
          const isSelected = selectedActivities.includes(option.value);
          const example = option.examples[businessType] || option.examples.other;

          return (
            <motion.div
              key={option.value}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <button
                onClick={() => toggleActivity(option.value)}
                className={`
                  w-full p-5 rounded-xl border-2 text-left transition-all relative
                  ${isSelected
                    ? 'border-blue-600 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300 bg-white'
                  }
                `}
              >
                {/* Selected indicator */}
                <AnimatePresence>
                  {isSelected && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      exit={{ scale: 0 }}
                      className="absolute top-4 right-4"
                    >
                      <CheckCircle className="h-6 w-6 text-blue-600" />
                    </motion.div>
                  )}
                </AnimatePresence>

                <div className="space-y-3 pr-8">
                  <div className="flex items-start gap-3">
                    <div className={`
                      p-2 rounded-lg flex-shrink-0
                      ${isSelected ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}
                    `}>
                      {option.icon}
                    </div>
                    
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900">
                        {option.label}
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {option.description}
                      </p>
                    </div>
                  </div>

                  {/* Industry-specific example */}
                  <div className={`
                    text-sm p-3 rounded-lg
                    ${isSelected ? 'bg-blue-100/50' : 'bg-gray-50'}
                  `}>
                    <p className="text-gray-700">
                      <span className="font-medium">Your example:</span> {example}
                    </p>
                  </div>
                </div>
              </button>
            </motion.div>
          );
        })}
      </div>

      {/* Help section */}
      <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
        <div className="flex items-start gap-3">
          <HelpCircle className="h-5 w-5 text-amber-600 flex-shrink-0 mt-0.5" />
          <div className="text-sm">
            <p className="font-semibold text-amber-900 mb-1">
              Remember: Failed experiments count too!
            </p>
            <p className="text-amber-700">
              R&D credit rewards the process of experimentation. If you tested different 
              approaches, measured results, and learned what works (or doesn't), that's qualifying work.
            </p>
          </div>
        </div>
      </div>

      {/* Selected count */}
      {selectedActivities.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center"
        >
          <p className="text-sm text-gray-600">
            <span className="font-semibold text-blue-600">{selectedActivities.length}</span> activities selected
          </p>
        </motion.div>
      )}

      {/* Navigation */}
      <div className="flex justify-between items-center pt-4">
        <button
          onClick={onBack}
          className="flex items-center gap-2 text-gray-600 hover:text-gray-800"
        >
          <ChevronLeft className="h-5 w-5" />
          Back
        </button>

        <button
          onClick={onNext}
          disabled={!canContinue}
          className={`
            flex items-center gap-2 font-medium transition-all
            ${canContinue
              ? 'text-blue-600 hover:text-blue-700'
              : 'text-gray-400 cursor-not-allowed'
            }
          `}
        >
          Continue
          <ChevronRight className="h-5 w-5" />
        </button>
      </div>
    </div>
  );
};
```

**4. Create Expense Input Step (components/calculator/steps/ExpenseInputStep.tsx):**
```typescript
/**
 * @file ExpenseInputStep.tsx
 * @description Step 3: Collect expense data for calculation
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 * 
 * Smart input fields with validation, tooltips, and
 * real-time calculation updates.
 */

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronRight, 
  ChevronLeft,
  HelpCircle,
  Users,
  DollarSign,
  Briefcase,
  Cloud,
  Package,
  AlertCircle,
  Calculator
} from 'lucide-react';
import { CalculationInput, BusinessType } from '../../../types/calculation.types';
import { formatCurrency, parseNumericInput } from '../../../utils/calculation.utils';
import { Tooltip } from '../../common/Tooltip';

interface ExpenseInputStepProps {
  input: CalculationInput;
  onChange: (updates: Partial<CalculationInput>) => void;
  errors: string[];
  isCalculating: boolean;
  businessType: BusinessType;
  onNext: () => void;
  onBack: () => void;
}

export const ExpenseInputStep: React.FC<ExpenseInputStepProps> = ({
  input,
  onChange,
  errors,
  isCalculating,
  businessType,
  onNext,
  onBack
}) => {
  const [touchedFields, setTouchedFields] = useState<Set<string>>(new Set());
  const [showAllocationHelp, setShowAllocationHelp] = useState(false);
  const firstInputRef = useRef<HTMLInputElement>(null);

  // Focus first input on mount
  useEffect(() => {
    firstInputRef.current?.focus();
  }, []);

  const handleFieldChange = (field: keyof CalculationInput, value: string) => {
    setTouchedFields(prev => new Set([...prev, field]));
    
    // Parse numeric values
    if (typeof input[field] === 'number') {
      const numericValue = parseNumericInput(value);
      onChange({ [field]: numericValue });
    } else {
      onChange({ [field]: value });
    }
  };

  const handleFieldBlur = (field: string) => {
    setTouchedFields(prev => new Set([...prev, field]));
  };

  // Smart defaults based on business type
  const getSalaryPlaceholder = () => {
    const defaults: Record<BusinessType, number> = {
      software: 95000,
      agency: 75000,
      ecommerce: 70000,
      consulting: 85000,
      healthcare: 80000,
      restaurant: 55000,
      manufacturing: 65000,
      services: 60000,
      other: 70000
    };
    return defaults[businessType] || 70000;
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Tell us about your team and expenses
        </h2>
        <p className="text-gray-600">
          Include everyone who worked on AI experiments
        </p>
      </div>

      {/* Employee Section */}
      <div className="bg-white rounded-xl border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 bg-blue-100 text-blue-600 rounded-lg">
            <Users className="h-5 w-5" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900">Employees</h3>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Total Employees */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Total employees
              <Tooltip content="All employees in your company">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <input
              ref={firstInputRef}
              type="number"
              min="0"
              value={input.totalEmployees || ''}
              onChange={(e) => handleFieldChange('totalEmployees', e.target.value)}
              onBlur={() => handleFieldBlur('totalEmployees')}
              placeholder="10"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Technical Employees */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Employees doing AI experiments
              <Tooltip content="Anyone who tested prompts, tuned chatbots, or built automations">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <input
              type="number"
              min="0"
              max={input.totalEmployees}
              value={input.technicalEmployees || ''}
              onChange={(e) => handleFieldChange('technicalEmployees', e.target.value)}
              onBlur={() => handleFieldBlur('technicalEmployees')}
              placeholder="3"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Average Salary */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Average annual salary
              <Tooltip content="Average salary of employees doing AI work">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2.5 text-gray-500">$</span>
              <input
                type="text"
                value={input.averageTechnicalSalary ? formatCurrency(input.averageTechnicalSalary).replace('$', '') : ''}
                onChange={(e) => handleFieldChange('averageTechnicalSalary', e.target.value)}
                onBlur={() => handleFieldBlur('averageTechnicalSalary')}
                placeholder={formatCurrency(getSalaryPlaceholder()).replace('$', '')}
                className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Time Allocation */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              % time on AI experiments
              <button
                onClick={() => setShowAllocationHelp(!showAllocationHelp)}
                className="ml-1"
              >
                <HelpCircle className="inline h-4 w-4 text-gray-400 hover:text-gray-600" />
              </button>
            </label>
            <div className="relative">
              <input
                type="number"
                min="0"
                max="100"
                value={input.rdAllocationPercentage || ''}
                onChange={(e) => handleFieldChange('rdAllocationPercentage', e.target.value)}
                onBlur={() => handleFieldBlur('rdAllocationPercentage')}
                placeholder="100"
                className="w-full pr-8 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <span className="absolute right-3 top-2.5 text-gray-500">%</span>
            </div>
          </div>
        </div>

        {/* Allocation help */}
        <AnimatePresence>
          {showAllocationHelp && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mt-4 p-4 bg-blue-50 rounded-lg text-sm"
            >
              <p className="font-medium text-blue-900 mb-2">Time allocation examples:</p>
              <ul className="space-y-1 text-blue-700">
                <li>• Full-time on AI projects: 100%</li>
                <li>• Half time on experiments: 50%</li>
                <li>• One day per week: 20%</li>
                <li>• Few hours per month: 5-10%</li>
              </ul>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Other Expenses Section */}
      <div className="bg-white rounded-xl border border-gray-200 p-6">
        <div className="flex items-center gap-3 mb-4">
          <div className="p-2 bg-purple-100 text-purple-600 rounded-lg">
            <DollarSign className="h-5 w-5" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900">Other R&D Expenses</h3>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Contractor Costs */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Contractor/consultant costs
              <Tooltip content="External help for AI projects (65% qualifies)">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2.5 text-gray-500">$</span>
              <input
                type="text"
                value={input.contractorCosts ? formatCurrency(input.contractorCosts).replace('$', '') : ''}
                onChange={(e) => handleFieldChange('contractorCosts', e.target.value)}
                onBlur={() => handleFieldBlur('contractorCosts')}
                placeholder="0"
                className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Cloud Costs */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Cloud & hosting costs
              <Tooltip content="AWS, Azure, GCP, Vercel, etc.">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2.5 text-gray-500">$</span>
              <input
                type="text"
                value={input.cloudCosts ? formatCurrency(input.cloudCosts).replace('$', '') : ''}
                onChange={(e) => handleFieldChange('cloudCosts', e.target.value)}
                onBlur={() => handleFieldBlur('cloudCosts')}
                placeholder="0"
                className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Software Costs */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              AI tool subscriptions
              <Tooltip content="ChatGPT Plus, Claude Pro, API costs">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2.5 text-gray-500">$</span>
              <input
                type="text"
                value={input.softwareCosts ? formatCurrency(input.softwareCosts).replace('$', '') : ''}
                onChange={(e) => handleFieldChange('softwareCosts', e.target.value)}
                onBlur={() => handleFieldBlur('softwareCosts')}
                placeholder="0"
                className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          {/* Other Supplies */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Other testing supplies
              <Tooltip content="Hardware, testing tools, data sets">
                <HelpCircle className="inline h-4 w-4 ml-1 text-gray-400" />
              </Tooltip>
            </label>
            <div className="relative">
              <span className="absolute left-3 top-2.5 text-gray-500">$</span>
              <input
                type="text"
                value={input.suppliesCosts ? formatCurrency(input.suppliesCosts).replace('$', '') : ''}
                onChange={(e) => handleFieldChange('suppliesCosts', e.target.value)}
                onBlur={() => handleFieldBlur('suppliesCosts')}
                placeholder="0"
                className="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Validation Errors */}
      {errors.length > 0 && touchedFields.size > 0 && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-red-50 border border-red-200 rounded-lg p-4"
        >
          <div className="flex items-start gap-3">
            <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="font-semibold text-red-900 mb-1">Please fix these issues:</p>
              <ul className="text-sm text-red-700 space-y-1">
                {errors.map((error, idx) => (
                  <li key={idx}>• {error}</li>
                ))}
              </ul>
            </div>
          </div>
        </motion.div>
      )}

      {/* Navigation */}
      <div className="flex justify-between items-center pt-4">
        <button
          onClick={onBack}
          className="flex items-center gap-2 text-gray-600 hover:text-gray-800"
        >
          <ChevronLeft className="h-5 w-5" />
          Back
        </button>

        <button
          onClick={onNext}
          disabled={errors.length > 0 || isCalculating}
          className={`
            flex items-center gap-2 font-medium transition-all
            ${errors.length === 0 && !isCalculating
              ? 'text-blue-600 hover:text-blue-700'
              : 'text-gray-400 cursor-not-allowed'
            }
          `}
        >
          {isCalculating ? (
            <>
              <Calculator className="h-5 w-5 animate-pulse" />
              Calculating...
            </>
          ) : (
            <>
              See Results
              <ChevronRight className="h-5 w-5" />
            </>
          )}
        </button>
      </div>
    </div>
  );
};
```

**5. Create Progress Indicator Component (components/calculator/ProgressIndicator.tsx):**
```typescript
/**
 * @file ProgressIndicator.tsx
 * @description Visual progress through calculator steps
 * @author SMBTaxCredits.com Team
 * @date 2024-01-15
 */

import React from 'react';
import { motion } from 'framer-motion';
import { Check } from 'lucide-react';

interface ProgressIndicatorProps {
  currentStep: number;
  totalSteps: number;
  onStepClick?: (step: number) => void;
  visitedSteps?: Set<number>;
}

export const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({
  currentStep,
  totalSteps,
  onStepClick,
  visitedSteps = new Set()
}) => {
  const steps = Array.from({ length: totalSteps }, (_, i) => i + 1);

  return (
    <div className="flex items-center justify-center space-x-4">
      {steps.map((step, index) => {
        const isActive = step === currentStep;
        const isCompleted = step < currentStep;
        const isVisited = visitedSteps.has(step);
        const isClickable = isVisited && onStepClick;

        return (
          <React.Fragment key={step}>
            {/* Step circle */}
            <button
              onClick={() => isClickable && onStepClick(step)}
              disabled={!isClickable}
              className={`
                relative flex items-center justify-center w-10 h-10 rounded-full
                transition-all duration-200 font-medium text-sm
                ${isClickable ? 'cursor-pointer' : 'cursor-default'}
                ${isActive
                  ? 'bg-blue-600 text-white ring-4 ring-blue-100'
                  : isCompleted
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-600'
                }
              `}
            >
              {isCompleted ? (
                <Check className="h-5 w-5" />
              ) : (
                <span>{step}</span>
              )}

              {/* Active indicator */}
              {isActive && (
                <motion.div
                  layoutId="activeStep"
                  className="absolute inset-0 rounded-full ring-4 ring-blue-300 ring-opacity-50"
                  initial={false}
                  transition={{ type: "spring", stiffness: 300, damping: 30 }}
                />
              )}
            </button>

            {/* Connector line */}
            {index < steps.length - 1 && (
              <div className="flex-1 h-0.5 max-w-[60px]">
                <div
                  className={`
                    h-full transition-all duration-500
                    ${isCompleted ? 'bg-blue-600' : 'bg-gray-200'}
                  `}
                />
              </div>
            )}
          </React.Fragment>
        );
      })}
    </div>
  );
};
```

CRITICAL: Add comprehensive documentation:
```javascript
/**
 * Calculator UI Architecture
 * 
 * FLOW DESIGN:
 * - 4-step progressive disclosure reduces cognitive load
 * - Each step builds on previous selections
 * - Real-time validation prevents errors
 * - Auto-advance to results when data is complete
 * 
 * USER PSYCHOLOGY:
 * - Business type first = immediate personalization
 * - Activities before numbers = build confidence
 * - Smart defaults reduce input friction
 * - Examples throughout maintain AI context
 * 
 * MOBILE OPTIMIZATION:
 * - Large touch targets (min 44px)
 * - Single column layouts on mobile
 * - Bottom navigation for thumb reach
 * - Smooth animations reduce perceived latency
 * 
 * FEDERAL FOCUS:
 * - No state selection required
 * - Simplified to federal calculations only
 * - Clear messaging about federal credits
 * 
 * PERFORMANCE:
 * - Debounced calculations prevent lag
 * - Progressive form prevents overwhelming users
 * - Animations at 60fps with Framer Motion
 * 
 * INTEGRATION:
 * - Uses useRealTimeCalculation hook
 * - Feeds directly into ResultsDisplay
 * - Data structure matches calculation engine
 * - Lead capture triggered from step 4
 * 
 * TODO: Add activity-based expense suggestions
 * TODO: Implement progress save/restore
 */
```