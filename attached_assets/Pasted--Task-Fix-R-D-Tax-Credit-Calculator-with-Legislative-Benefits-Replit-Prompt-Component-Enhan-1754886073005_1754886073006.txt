# Task: Fix R&D Tax Credit Calculator with Legislative Benefits - Replit Prompt

## Component: Enhanced R&D Tax Credit Calculator with QSB Benefits
**KB References**: 
- docs/credit-calculation-guide.md → QSB Benefits, Payroll Tax Offset ($500k), Section 280C, 2025 Updates
- docs/api-documentation.md → Calculator Endpoints & Response Structure
- docs/business-rules.md → Qualification Criteria & Pricing Logic
- docs/ai-examples.md → AI/Automation Use Cases for Each Industry
- docs/marketing-copywriting-playbook.md → Benefit Messaging & CTAs

**Business Context**: Transform the calculator to showcase game-changing benefits for startups and SMBs, especially the $500,000 payroll tax offset that provides immediate cash flow without waiting for profitability. This positions SMBTaxCredits.com as the go-to platform for AI-experimenting businesses to maximize their R&D credits.

### Replit Prompt

"Enhance the R&D tax credit calculator to include all legislative benefits from PATH Act, IRA 2022, and 2025 OBBBA, focusing on the massive $500,000 payroll tax offset for startups:

**Key Requirements:**
1. Add QSB eligibility checking (<$5M revenue, <5 years old) 
2. Show $500,000 payroll tax offset benefit with quarterly cash flow
3. Include Section 280C election (full vs. reduced credit)
4. Display legislative timeline (2022-2024 amortization, 2025 restoration)
5. Enhanced results page with clear checkout CTA
6. Industry-specific AI experimentation examples
7. Mobile-responsive with Grade 7-9 reading level
8. Emphasize immediate cash benefits for pre-revenue startups

Key example to highlight: AI startup with no profits gets $400,000 back via quarterly payroll tax reductions instead of waiting years for income tax benefits.

The calculator should excite users about immediate cash flow benefits and drive them to checkout."

**1. Update Calculator Engine (client/src/services/calculation/calculator.engine.ts):**
```typescript
/**
 * @file calculator.engine.ts
 * @description Enhanced R&D tax credit calculation with legislative benefits
 * @author SMBTaxCredits.com Team
 * @date 2025-01-09
 * @knowledgeBase 
 * - docs/credit-calculation-guide.md → QSB rules, $500k offset, Section 280C
 * - docs/business-rules.md → Qualification logic
 * - docs/api-documentation.md → Response structures
 * 
 * MAJOR UPDATES:
 * 1. QSB eligibility with $500k payroll offset (was $250k)
 * 2. Section 280C full vs reduced credit choice
 * 3. Legislative timeline awareness (2022-2025)
 * 4. Cash flow projections for startups
 * 5. Industry-specific AI examples
 * 
 * EXAMPLES:
 * - AI Startup: $400k credit → $100k quarterly payroll savings
 * - E-commerce: Custom recommendation engine → $50k immediate benefit
 * - Agency: GPT prompt library → $30k cash back via payroll
 * 
 * BUSINESS RULES:
 * - QSB: <$5M revenue AND no revenue >5 years ago
 * - Payroll offset: Up to $500k/year (IRA 2022 increase)
 * - Can offset Social Security (6.2%) + Medicare (1.45%)
 * - Must elect on original return (no amendments)
 * - 5-year lifetime limit on payroll elections
 */

export interface EnhancedCalculationInput {
  // Company info
  businessType: string;
  industryCode: string;
  
  // QSB eligibility fields (NEW)
  currentYearRevenue: number;
  yearOfFirstRevenue: number;
  hasIncomeTaxLiability: boolean;
  quarterlyPayrollTax: number;
  
  // R&D team
  technicalEmployees: number;
  averageTechnicalSalary: number;
  rdAllocationPercentage: number;
  
  // Expenses
  contractorCosts: number;
  suppliesCosts: number;
  softwareCosts: number;
  cloudCosts: number;
  
  // Prior years for ASC
  priorYearQREs: number[];
  isFirstTimeFiler: boolean;
  
  // Options (NEW)
  section280CElection: 'full' | 'reduced';
  taxYear: number;
  
  // AI activities
  qualifyingActivities: string[];
}

export interface QSBAnalysis {
  isEligible: boolean;
  currentYearRevenue: number;
  yearsInBusiness: number;
  eligibilityReasons: string[];
  
  payrollOffsetAvailable: boolean;
  maxPayrollOffset: number; // Up to $500k
  quarterlyBenefit: number;
  
  cashFlowComparison: {
    withPayrollOffset: {
      q1: number;
      q2: number;
      q3: number;
      q4: number;
      total: number;
    };
    traditionalCredit: {
      year1: number; // 0 if no income tax liability
      year2: number;
      year3: number;
      yearToBreakeven: number;
    };
  };
  
  lifetimeRemaining: number; // 5-year limit
  recommendedAction: string;
}

export interface LegislativeContext {
  taxYear: number;
  amortizationRequired: boolean;
  payrollTaxCap: number;
  deductionPercentage: number;
  alerts: Array<{
    type: 'benefit' | 'warning' | 'info';
    message: string;
    impact: string;
  }>;
}

export interface EnhancedCalculationResult {
  // QRE breakdown (existing)
  qreBreakdown: QREBreakdown;
  
  // Credit calculations
  ascCalculation: {
    method: 'first-time' | 'repeat';
    currentYearQRE: number;
    priorYearAverage: number;
    baseAmount: number;
    excessQRE: number;
    creditRate: number;
    calculatedCredit: number;
  };
  
  // Section 280C comparison (NEW)
  creditOptions: {
    fullCredit: {
      amount: number;
      deductionReduction: number;
      netBenefit: number;
      complexity: string;
    };
    reducedCredit: {
      amount: number;
      deductionReduction: number;
      netBenefit: number;
      complexity: string;
    };
    recommendation: 'full' | 'reduced';
    reasoning: string;
  };
  
  // Final amounts
  federalCredit: number;
  effectiveCreditRate: string; // "10.7%" for display
  
  // QSB benefits (NEW)
  qsbAnalysis: QSBAnalysis;
  
  // Legislative context (NEW)
  legislativeContext: LegislativeContext;
  
  // Pricing & ROI
  pricingTier: PricingTier;
  roi: ROICalculation;
  
  // Industry insights (NEW)
  industryInsights: {
    commonActivities: string[];
    averageCredit: string;
    successStory: string;
  };
  
  // Warnings & assumptions
  warnings: string[];
  assumptions: string[];
  confidence: 'high' | 'medium' | 'low';
}

export class EnhancedRDTaxCalculator {
  // Legislative constants
  private static readonly PAYROLL_CAP_PRE_2023 = 250000;
  private static readonly PAYROLL_CAP_POST_2023 = 500000; // IRA 2022 doubled it!
  private static readonly QSB_REVENUE_LIMIT = 5000000;
  private static readonly QSB_AGE_LIMIT = 5;
  private static readonly PAYROLL_SS_RATE = 0.062;
  private static readonly PAYROLL_MEDICARE_RATE = 0.0145;
  private static readonly CORPORATE_TAX_RATE = 0.21;
  
  /**
   * Main calculation with all legislative benefits
   */
  public static calculate(input: EnhancedCalculationInput): EnhancedCalculationResult {
    // Step 1: Validate and get legislative context
    const legislativeContext = this.getLegislativeContext(input.taxYear);
    const validation = this.validateInput(input);
    
    // Step 2: Calculate QREs
    const qreBreakdown = this.calculateQREs(input);
    
    // Step 3: Calculate ASC credit
    const ascCalc = this.calculateASC(qreBreakdown.total, input);
    
    // Step 4: Apply Section 280C election
    const creditOptions = this.calculateCreditOptions(ascCalc.calculatedCredit, input.section280CElection);
    
    // Step 5: Analyze QSB eligibility and benefits
    const qsbAnalysis = this.analyzeQSBBenefits(
      creditOptions.fullCredit.amount,
      input,
      legislativeContext
    );
    
    // Step 6: Get pricing tier
    const effectiveCredit = input.section280CElection === 'reduced' 
      ? creditOptions.reducedCredit.amount 
      : creditOptions.fullCredit.amount;
    const pricingTier = this.getPricingTier(effectiveCredit);
    
    // Step 7: Calculate ROI with cash flow timing
    const roi = this.calculateEnhancedROI(
      effectiveCredit,
      pricingTier.price,
      qsbAnalysis
    );
    
    // Step 8: Get industry insights
    const industryInsights = this.getIndustryInsights(input.businessType, input.industryCode);
    
    return {
      qreBreakdown,
      ascCalculation: ascCalc,
      creditOptions,
      federalCredit: effectiveCredit,
      effectiveCreditRate: ((effectiveCredit / qreBreakdown.total) * 100).toFixed(1) + '%',
      qsbAnalysis,
      legislativeContext,
      pricingTier,
      roi,
      industryInsights,
      warnings: validation.warnings,
      assumptions: this.getAssumptions(input, ascCalc.method),
      confidence: this.assessConfidence(input, validation)
    };
  }
  
  /**
   * Get legislative context based on tax year
   */
  private static getLegislativeContext(taxYear: number): LegislativeContext {
    const alerts: LegislativeContext['alerts'] = [];
    
    // Determine context based on year
    if (taxYear < 2022) {
      return {
        taxYear,
        amortizationRequired: false,
        payrollTaxCap: this.PAYROLL_CAP_PRE_2023,
        deductionPercentage: 100,
        alerts: [{
          type: 'info',
          message: 'Full R&D deduction available',
          impact: 'Immediate tax benefit from R&D expenses'
        }]
      };
    } else if (taxYear >= 2022 && taxYear <= 2024) {
      alerts.push({
        type: 'warning',
        message: '⚠️ R&D expenses must be amortized over 5 years',
        impact: 'Reduced current-year deduction, but credit still valuable'
      });
      
      if (taxYear >= 2023) {
        alerts.push({
          type: 'benefit',
          message: '✅ Payroll tax offset increased to $500,000!',
          impact: 'Double the cash benefit for qualified startups'
        });
      }
      
      return {
        taxYear,
        amortizationRequired: true,
        payrollTaxCap: taxYear >= 2023 ? this.PAYROLL_CAP_POST_2023 : this.PAYROLL_CAP_PRE_2023,
        deductionPercentage: 20, // First year of 5-year amortization
        alerts
      };
    } else { // 2025+
      return {
        taxYear,
        amortizationRequired: false,
        payrollTaxCap: this.PAYROLL_CAP_POST_2023,
        deductionPercentage: 100,
        alerts: [
          {
            type: 'benefit',
            message: '🎉 Full R&D deduction restored by 2025 legislation!',
            impact: 'Maximum tax benefit - deduct 100% of R&D expenses immediately'
          },
          {
            type: 'benefit',
            message: '💰 $500,000 payroll tax offset available for startups',
            impact: 'Get immediate cash flow without waiting for profits'
          }
        ]
      };
    }
  }
  
  /**
   * Analyze QSB eligibility and calculate benefits
   */
  private static analyzeQSBBenefits(
    creditAmount: number,
    input: EnhancedCalculationInput,
    context: LegislativeContext
  ): QSBAnalysis {
    const currentYear = new Date().getFullYear();
    const yearsInBusiness = input.yearOfFirstRevenue ? 
      currentYear - input.yearOfFirstRevenue : 0;
    
    // Check eligibility
    const isEligible = input.currentYearRevenue < this.QSB_REVENUE_LIMIT && 
                      yearsInBusiness < this.QSB_AGE_LIMIT;
    
    const eligibilityReasons = [];
    if (input.currentYearRevenue >= this.QSB_REVENUE_LIMIT) {
      eligibilityReasons.push(`Revenue ($${input.currentYearRevenue.toLocaleString()}) exceeds $5M limit`);
    }
    if (yearsInBusiness >= this.QSB_AGE_LIMIT) {
      eligibilityReasons.push(`Business age (${yearsInBusiness} years) exceeds 5-year limit`);
    }
    
    // Calculate payroll offset benefits
    const maxPayrollOffset = Math.min(creditAmount, context.payrollTaxCap);
    const quarterlyBenefit = input.quarterlyPayrollTax > 0 ? 
      Math.min(maxPayrollOffset / 4, input.quarterlyPayrollTax) : 
      maxPayrollOffset / 4;
    
    // Cash flow comparison
    const cashFlowComparison = {
      withPayrollOffset: {
        q1: quarterlyBenefit,
        q2: quarterlyBenefit,
        q3: quarterlyBenefit,
        q4: Math.min(quarterlyBenefit, maxPayrollOffset - (quarterlyBenefit * 3)),
        total: maxPayrollOffset
      },
      traditionalCredit: {
        year1: input.hasIncomeTaxLiability ? creditAmount : 0,
        year2: 0,
        year3: 0,
        yearToBreakeven: input.hasIncomeTaxLiability ? 1 : 999 // "Never" if no income tax
      }
    };
    
    // Recommended action
    let recommendedAction = '';
    if (isEligible && !input.hasIncomeTaxLiability) {
      recommendedAction = `Elect payroll tax offset to get $${maxPayrollOffset.toLocaleString()} in immediate cash benefits!`;
    } else if (isEligible && input.hasIncomeTaxLiability) {
      recommendedAction = `Consider payroll offset for faster cash flow vs. income tax credit`;
    } else if (input.currentYearRevenue > 4000000) {
      recommendedAction = `Warning: Approaching $5M revenue limit - this may be your last year for payroll offset`;
    } else {
      recommendedAction = `Use credit against income tax when profitable`;
    }
    
    return {
      isEligible,
      currentYearRevenue: input.currentYearRevenue,
      yearsInBusiness,
      eligibilityReasons,
      payrollOffsetAvailable: isEligible,
      maxPayrollOffset: isEligible ? maxPayrollOffset : 0,
      quarterlyBenefit: isEligible ? quarterlyBenefit : 0,
      cashFlowComparison,
      lifetimeRemaining: Math.max(0, 5 - yearsInBusiness),
      recommendedAction
    };
  }
  
  /**
   * Calculate Section 280C options
   */
  private static calculateCreditOptions(
    baseCredit: number,
    election: 'full' | 'reduced'
  ): EnhancedCalculationResult['creditOptions'] {
    const fullCredit = {
      amount: baseCredit,
      deductionReduction: baseCredit,
      netBenefit: baseCredit - (baseCredit * this.CORPORATE_TAX_RATE),
      complexity: 'Must reduce R&D deduction by credit amount - complex accounting'
    };
    
    const reducedCredit = {
      amount: Math.round(baseCredit * (1 - this.CORPORATE_TAX_RATE)), // 79% of full
      deductionReduction: 0,
      netBenefit: Math.round(baseCredit * (1 - this.CORPORATE_TAX_RATE)),
      complexity: 'Keep full R&D deduction - simpler for SMBs'
    };
    
    // Recommendation logic
    const recommendation = 'reduced'; // Almost always better for SMBs
    const reasoning = 'Reduced credit provides same net benefit with simpler accounting';
    
    return {
      fullCredit,
      reducedCredit,
      recommendation,
      reasoning
    };
  }
  
  /**
   * Get industry-specific insights
   */
  private static getIndustryInsights(
    businessType: string,
    industryCode: string
  ): EnhancedCalculationResult['industryInsights'] {
    // Industry-specific data from docs/ai-examples.md
    const industryData: Record<string, any> = {
      'saas': {
        commonActivities: [
          'Custom AI chatbot development',
          'Recommendation engine optimization',
          'Automated workflow creation',
          'API integration experiments'
        ],
        averageCredit: '$50,000 - $150,000',
        successStory: 'SaaS startup claimed $127K credit for GPT-powered customer success bot development'
      },
      'ecommerce': {
        commonActivities: [
          'AI product recommendation tuning',
          'Chatbot customer service',
          'Dynamic pricing algorithms',
          'Inventory prediction models'
        ],
        averageCredit: '$30,000 - $80,000',
        successStory: 'E-commerce brand got $67K credit for custom recommendation engine that increased AOV 23%'
      },
      'agency': {
        commonActivities: [
          'Custom GPT development for clients',
          'Prompt engineering libraries',
          'Automated content workflows',
          'AI-powered analytics dashboards'
        ],
        averageCredit: '$25,000 - $75,000',
        successStory: 'Marketing agency received $52K for building proprietary AI content system'
      },
      'manufacturing': {
        commonActivities: [
          'Predictive maintenance AI',
          'Quality control automation',
          'Supply chain optimization',
          'Production line ML models'
        ],
        averageCredit: '$75,000 - $200,000',
        successStory: 'Manufacturer saved $143K developing AI-based defect detection system'
      }
    };
    
    const defaultInsights = {
      commonActivities: [
        'AI tool customization',
        'Process automation',
        'Data analysis improvements',
        'Integration development'
      ],
      averageCredit: '$40,000 - $100,000',
      successStory: 'Companies like yours typically claim significant credits for AI experimentation'
    };
    
    return industryData[businessType] || defaultInsights;
  }
  
  // ... (continue with other methods)
}
```

**2. Create Enhanced Calculator UI (client/src/components/calculator/EnhancedCalculator.tsx):**
```typescript
/**
 * @file EnhancedCalculator.tsx
 * @description Interactive calculator with legislative benefits display
 * @knowledgeBase 
 * - docs/credit-calculation-guide.md → QSB benefits, cash flow examples
 * - docs/design-system.md → UI components and styling
 * - docs/marketing-copywriting-playbook.md → Benefit messaging
 * 
 * FEATURES:
 * - QSB eligibility wizard
 * - Cash flow timeline visualization
 * - Section 280C toggle with explanation
 * - Legislative alerts by year
 * - Industry-specific examples
 * - Clear checkout CTA on results
 */

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Calculator, 
  DollarSign, 
  TrendingUp, 
  AlertCircle,
  CheckCircle2,
  Rocket,
  Calendar,
  Building,
  Users
} from 'lucide-react';
import { EnhancedRDTaxCalculator } from '@/services/calculation/calculator.engine';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useNavigate } from 'react-router-dom';

// Step 1: Business & Eligibility Info
const Step1_BusinessInfo: React.FC<StepProps> = ({ data, updateData, next }) => {
  const currentYear = new Date().getFullYear();
  
  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building className="h-5 w-5" />
            Tell us about your business
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            We'll check if you qualify for the game-changing $500K startup benefit
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Business Type Selection */}
          <div>
            <label className="text-sm font-medium mb-3 block">
              What type of business are you?
            </label>
            <div className="grid grid-cols-2 gap-3">
              {[
                { id: 'saas', name: 'Software/SaaS', icon: '💻' },
                { id: 'ecommerce', name: 'E-commerce', icon: '🛒' },
                { id: 'agency', name: 'Agency/Services', icon: '🎨' },
                { id: 'manufacturing', name: 'Manufacturing', icon: '🏭' },
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => updateData({ businessType: type.id })}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    data.businessType === type.id
                      ? 'border-primary bg-primary/5'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="text-2xl mb-1">{type.icon}</div>
                  <div className="text-sm font-medium">{type.name}</div>
                </button>
              ))}
            </div>
          </div>

          {/* QSB Eligibility Check */}
          <div className="space-y-4 p-4 bg-blue-50 rounded-lg">
            <h3 className="font-medium flex items-center gap-2">
              <Rocket className="h-4 w-4 text-blue-600" />
              Startup Benefit Eligibility Check
            </h3>
            
            <div>
              <label className="text-sm font-medium block mb-2">
                What's your expected revenue this year?
              </label>
              <select
                value={data.currentYearRevenue || ''}
                onChange={(e) => updateData({ currentYearRevenue: Number(e.target.value) })}
                className="w-full p-2 border rounded-md"
              >
                <option value="">Select range...</option>
                <option value="0">Pre-revenue</option>
                <option value="500000">Under $500K</option>
                <option value="1000000">$500K - $1M</option>
                <option value="2500000">$1M - $2.5M</option>
                <option value="4000000">$2.5M - $4M</option>
                <option value="4900000">$4M - $5M</option>
                <option value="6000000">Over $5M</option>
              </select>
            </div>

            <div>
              <label className="text-sm font-medium block mb-2">
                When did you first have revenue?
              </label>
              <select
                value={data.yearOfFirstRevenue || ''}
                onChange={(e) => updateData({ yearOfFirstRevenue: Number(e.target.value) })}
                className="w-full p-2 border rounded-md"
              >
                <option value="">Select year...</option>
                <option value={currentYear}>This year (startup!)</option>
                {[1, 2, 3, 4, 5, 6].map(yearsAgo => (
                  <option key={yearsAgo} value={currentYear - yearsAgo}>
                    {currentYear - yearsAgo}
                  </option>
                ))}
                <option value={currentYear - 7}>Before {currentYear - 6}</option>
              </select>
            </div>

            {/* QSB Status Alert */}
            {data.currentYearRevenue !== undefined && data.yearOfFirstRevenue && (
              <QSBStatusAlert 
                revenue={data.currentYearRevenue}
                yearOfFirstRevenue={data.yearOfFirstRevenue}
                currentYear={currentYear}
              />
            )}
          </div>

          {/* Tax Year Selection */}
          <div>
            <label className="text-sm font-medium block mb-2">
              Which tax year are you calculating?
            </label>
            <select
              value={data.taxYear || currentYear}
              onChange={(e) => updateData({ taxYear: Number(e.target.value) })}
              className="w-full p-2 border rounded-md"
            >
              <option value={currentYear}>{currentYear} (Current Year)</option>
              <option value={currentYear - 1}>{currentYear - 1}</option>
              <option value={currentYear - 2}>{currentYear - 2}</option>
            </select>
            
            {/* Legislative Alert */}
            <LegislativeAlert year={data.taxYear || currentYear} />
          </div>

          <Button 
            onClick={next}
            disabled={!data.businessType || data.currentYearRevenue === undefined}
            className="w-full"
            size="lg"
          >
            Continue to R&D Activities
          </Button>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// QSB Status Component
const QSBStatusAlert: React.FC<{
  revenue: number;
  yearOfFirstRevenue: number;
  currentYear: number;
}> = ({ revenue, yearOfFirstRevenue, currentYear }) => {
  const yearsInBusiness = currentYear - yearOfFirstRevenue;
  const isQSB = revenue < 5000000 && yearsInBusiness < 5;
  
  if (isQSB) {
    return (
      <Alert className="bg-green-50 border-green-200">
        <CheckCircle2 className="h-4 w-4 text-green-600" />
        <AlertDescription>
          <strong>🎉 Great news!</strong> You qualify for up to $500,000 in immediate payroll tax savings! 
          No need to wait for profits.
        </AlertDescription>
      </Alert>
    );
  }
  
  const reasons = [];
  if (revenue >= 5000000) reasons.push('revenue exceeds $5M');
  if (yearsInBusiness >= 5) reasons.push('business is over 5 years old');
  
  return (
    <Alert className="bg-amber-50 border-amber-200">
      <AlertCircle className="h-4 w-4 text-amber-600" />
      <AlertDescription>
        Not eligible for payroll offset ({reasons.join(' and ')}). 
        You can still use credits against income tax when profitable.
      </AlertDescription>
    </Alert>
  );
};

// Legislative Alert Component
const LegislativeAlert: React.FC<{ year: number }> = ({ year }) => {
  if (year >= 2025) {
    return (
      <Alert className="mt-2 bg-green-50 border-green-200">
        <AlertDescription className="text-sm">
          ✅ Full R&D deduction restored! 100% immediate write-off.
        </AlertDescription>
      </Alert>
    );
  } else if (year >= 2022 && year <= 2024) {
    return (
      <Alert className="mt-2 bg-amber-50 border-amber-200">
        <AlertDescription className="text-sm">
          ⚠️ R&D expenses require 5-year amortization, but credit still valuable.
          {year >= 2023 && ' ✅ $500K payroll offset available!'}
        </AlertDescription>
      </Alert>
    );
  }
  return null;
};

// Step 4: Enhanced Results with Legislative Benefits
const Step4_Results: React.FC<ResultsProps> = ({ data, results }) => {
  const navigate = useNavigate();
  const [selectedCredit, setSelectedCredit] = useState<'full' | 'reduced'>('reduced');
  
  const {
    qreBreakdown,
    creditOptions,
    qsbAnalysis,
    legislativeContext,
    pricingTier,
    roi,
    industryInsights
  } = results;

  const finalCredit = selectedCredit === 'full' 
    ? creditOptions.fullCredit.amount 
    : creditOptions.reducedCredit.amount;

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
      {/* Hero Result */}
      <Card className="mb-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <CardContent className="pt-6">
          <div className="text-center space-y-4">
            <div className="text-5xl font-bold">
              ${finalCredit.toLocaleString()}
            </div>
            <div className="text-xl">
              Your Estimated Federal R&D Tax Credit
            </div>
            {qsbAnalysis.isEligible && (
              <Badge className="bg-white/20 text-white border-white/30">
                <Rocket className="h-3 w-3 mr-1" />
                Eligible for $500K Startup Benefit!
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>

      {/* QSB Cash Flow Benefit */}
      {qsbAnalysis.isEligible && (
        <Card className="mb-6 border-green-200 bg-green-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-green-800">
              <Rocket className="h-5 w-5" />
              Immediate Cash Flow Benefit Available!
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p className="text-sm">
                As a qualified startup, you can get up to ${qsbAnalysis.maxPayrollOffset.toLocaleString()} 
                back through quarterly payroll tax reductions - no need to wait for profits!
              </p>
              
              {/* Quarterly Cash Flow Timeline */}
              <div className="grid grid-cols-4 gap-2">
                {['Q1', 'Q2', 'Q3', 'Q4'].map((quarter, idx) => {
                  const amount = idx < 3 
                    ? qsbAnalysis.cashFlowComparison.withPayrollOffset.q1
                    : qsbAnalysis.cashFlowComparison.withPayrollOffset.q4;
                  
                  return (
                    <div key={quarter} className="text-center p-3 bg-white rounded-lg">
                      <div className="text-xs text-gray-600">{quarter}</div>
                      <div className="font-bold text-green-700">
                        ${amount.toLocaleString()}
                      </div>
                      <div className="text-xs text-gray-500">saved</div>
                    </div>
                  );
                })}
              </div>
              
              <Alert className="bg-blue-50 border-blue-200">
                <AlertDescription className="text-sm">
                  <strong>How it works:</strong> File Form 6765 with your tax return, 
                  then reduce your quarterly 941 payroll deposits. Cash in your pocket every quarter!
                </AlertDescription>
              </Alert>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Section 280C Choice */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Choose Your Credit Type</CardTitle>
          <p className="text-sm text-muted-foreground">
            Most SMBs choose "Reduced Credit" for simpler accounting
          </p>
        </CardHeader>
        <CardContent>
          <Tabs value={selectedCredit} onValueChange={(v) => setSelectedCredit(v as 'full' | 'reduced')}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="full">Full Credit</TabsTrigger>
              <TabsTrigger value="reduced">Reduced Credit (Recommended)</TabsTrigger>
            </TabsList>
            <TabsContent value="full" className="space-y-2">
              <div className="flex justify-between">
                <span>Credit Amount:</span>
                <span className="font-bold">${creditOptions.fullCredit.amount.toLocaleString()}</span>
              </div>
              <div className="text-sm text-muted-foreground">
                {creditOptions.fullCredit.complexity}
              </div>
            </TabsContent>
            <TabsContent value="reduced" className="space-y-2">
              <div className="flex justify-between">
                <span>Credit Amount:</span>
                <span className="font-bold">${creditOptions.reducedCredit.amount.toLocaleString()}</span>
              </div>
              <div className="text-sm text-muted-foreground">
                {creditOptions.reducedCredit.complexity}
              </div>
              <Badge className="bg-green-100 text-green-800">Same net benefit, easier accounting</Badge>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Legislative Benefits */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Your Legislative Advantages</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {legislativeContext.alerts.map((alert, idx) => (
              <Alert key={idx} className={
                alert.type === 'benefit' ? 'bg-green-50 border-green-200' :
                alert.type === 'warning' ? 'bg-amber-50 border-amber-200' :
                'bg-blue-50 border-blue-200'
              }>
                <AlertDescription>
                  <div className="font-medium">{alert.message}</div>
                  <div className="text-sm mt-1">{alert.impact}</div>
                </AlertDescription>
              </Alert>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Industry Insights */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Companies Like Yours</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">Common R&D Activities:</h4>
              <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                {industryInsights.commonActivities.map((activity, idx) => (
                  <li key={idx}>{activity}</li>
                ))}
              </ul>
            </div>
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="text-sm font-medium text-blue-900">Success Story</div>
              <div className="text-sm text-blue-700 mt-1">{industryInsights.successStory}</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Pricing & CTA */}
      <Card className="border-primary">
        <CardHeader className="bg-primary/5">
          <CardTitle>Get Your R&D Tax Credits</CardTitle>
          <div className="flex items-center justify-between">
            <div>
              <div className="text-3xl font-bold">${pricingTier.price}</div>
              <div className="text-sm text-muted-foreground">One-time flat fee</div>
            </div>
            <Badge variant="secondary" className="text-lg px-3 py-1">
              {roi.roiMultiple}x ROI
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span className="text-sm">IRS-compliant documentation in 48 hours</span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span className="text-sm">Expert review by R&D tax specialists</span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span className="text-sm">Audit defense support included</span>
              </div>
              {qsbAnalysis.isEligible && (
                <div className="flex items-center gap-2">
                  <CheckCircle2 className="h-4 w-4 text-green-600" />
                  <span className="text-sm font-medium">Form 8974 for payroll tax offset</span>
                </div>
              )}
            </div>

            <Button 
              size="lg" 
              className="w-full text-lg py-6"
              onClick={() => {
                // Save calculation results to session
                sessionStorage.setItem('calculationResults', JSON.stringify(results));
                sessionStorage.setItem('calculationData', JSON.stringify(data));
                navigate('/checkout');
              }}
            >
              Get Started - Claim ${finalCredit.toLocaleString()} Credit
            </Button>

            <p className="text-xs text-center text-muted-foreground">
              No risk - pay only after you review your documentation
            </p>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

// Main Enhanced Calculator Component
export const EnhancedCalculator: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState<EnhancedCalculationInput>({
    // Initialize with defaults
    businessType: '',
    industryCode: '',
    currentYearRevenue: 0,
    yearOfFirstRevenue: new Date().getFullYear(),
    hasIncomeTaxLiability: false,
    quarterlyPayrollTax: 0,
    technicalEmployees: 0,
    averageTechnicalSalary: 0,
    rdAllocationPercentage: 100,
    contractorCosts: 0,
    suppliesCosts: 0,
    softwareCosts: 0,
    cloudCosts: 0,
    priorYearQREs: [],
    isFirstTimeFiler: true,
    section280CElection: 'reduced',
    taxYear: new Date().getFullYear(),
    qualifyingActivities: []
  });

  const [results, setResults] = useState<EnhancedCalculationResult | null>(null);

  // Update data helper
  const updateData = (updates: Partial<EnhancedCalculationInput>) => {
    setFormData(prev => ({ ...prev, ...updates }));
  };

  // Calculate results when reaching final step
  useEffect(() => {
    if (currentStep === 4 && !results) {
      const calculationResults = EnhancedRDTaxCalculator.calculate(formData);
      setResults(calculationResults);
    }
  }, [currentStep, formData, results]);

  return (
    <div className="max-w-4xl mx-auto">
      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-2">
          {['Business Info', 'R&D Activities', 'Expenses', 'Results'].map((step, idx) => (
            <div
              key={idx}
              className={`flex items-center ${idx < 3 ? 'flex-1' : ''}`}
            >
              <div
                className={`w-10 h-10 rounded-full flex items-center justify-center font-medium ${
                  idx + 1 <= currentStep
                    ? 'bg-primary text-white'
                    : 'bg-gray-200 text-gray-500'
                }`}
              >
                {idx + 1}
              </div>
              {idx < 3 && (
                <div
                  className={`flex-1 h-1 mx-2 ${
                    idx + 1 < currentStep ? 'bg-primary' : 'bg-gray-200'
                  }`}
                />
              )}
            </div>
          ))}
        </div>
        <div className="flex justify-between text-sm">
          {['Business Info', 'R&D Activities', 'Expenses', 'Results'].map((step, idx) => (
            <div key={idx} className="text-center">
              <span className={idx + 1 <= currentStep ? 'text-primary font-medium' : 'text-gray-500'}>
                {step}
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Step Content */}
      <AnimatePresence mode="wait">
        {currentStep === 1 && (
          <Step1_BusinessInfo
            data={formData}
            updateData={updateData}
            next={() => setCurrentStep(2)}
          />
        )}
        {currentStep === 2 && (
          <Step2_RDActivities
            data={formData}
            updateData={updateData}
            next={() => setCurrentStep(3)}
            back={() => setCurrentStep(1)}
          />
        )}
        {currentStep === 3 && (
          <Step3_Expenses
            data={formData}
            updateData={updateData}
            next={() => setCurrentStep(4)}
            back={() => setCurrentStep(2)}
          />
        )}
        {currentStep === 4 && results && (
          <Step4_Results
            data={formData}
            results={results}
          />
        )}
      </AnimatePresence>
    </div>
  );
};
```

**3. Update Landing Page to Highlight Benefits (client/src/pages/landing.tsx):**
```typescript
// Add hero section update
const HeroSection = () => (
  <section className="pt-20 pb-16 px-4">
    <div className="max-w-6xl mx-auto text-center">
      <Badge className="mb-4 px-4 py-1 text-sm bg-green-100 text-green-800 border-green-200">
        2025 Update: Full R&D Deduction Restored + $500K Startup Benefit
      </Badge>
      
      <h1 className="text-5xl md:text-6xl font-bold mb-6">
        Your AI Experiments = Up to{' '}
        <span className="text-primary">$500,000</span> in Tax Credits
      </h1>
      
      <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
        Tuned a chatbot? Built custom GPTs? Tested automation? 
        Get immediate cash back through payroll tax savings - no profits required!
      </p>
      
      <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
        <Button size="lg" className="text-lg px-8" onClick={() => scrollToCalculator()}>
          Calculate My Credit
        </Button>
        <Button size="lg" variant="outline" className="text-lg px-8">
          See How It Works
        </Button>
      </div>
      
      {/* Trust Signals */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto">
        <div className="text-center">
          <div className="text-3xl font-bold text-primary">$500K</div>
          <div className="text-sm text-gray-600">Max Annual Benefit</div>
        </div>
        <div className="text-center">
          <div className="text-3xl font-bold text-primary">48hrs</div>
          <div className="text-sm text-gray-600">Documentation Ready</div>
        </div>
        <div className="text-center">
          <div className="text-3xl font-bold text-primary">6-14%</div>
          <div className="text-sm text-gray-600">Of R&D Expenses</div>
        </div>
        <div className="text-center">
          <div className="text-3xl font-bold text-primary">$399+</div>
          <div className="text-sm text-gray-600">Flat Fee Pricing</div>
        </div>
      </div>
    </div>
  </section>
);

// Add QSB benefit section
const StartupBenefitSection = () => (
  <section className="py-16 bg-gradient-to-br from-blue-50 to-purple-50">
    <div className="max-w-6xl mx-auto px-4">
      <div className="text-center mb-12">
        <Badge className="mb-4 bg-blue-100 text-blue-800">
          PATH Act + IRA 2022 Enhanced Benefits
        </Badge>
        <h2 className="text-4xl font-bold mb-4">
          Startups: Turn R&D Credits into Immediate Cash
        </h2>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          No profits? No problem! Qualified startups can offset up to $500,000 
          in payroll taxes every year for 5 years.
        </p>
      </div>
      
      <div className="grid md:grid-cols-2 gap-8 items-center">
        <div className="space-y-6">
          <div className="flex items-start gap-4">
            <CheckCircle2 className="h-6 w-6 text-green-600 mt-1" />
            <div>
              <h3 className="font-semibold mb-1">Doubled Benefit in 2023</h3>
              <p className="text-gray-600">
                The Inflation Reduction Act doubled the cap from $250K to $500K - 
                that's $2.5M over 5 years!
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-4">
            <CheckCircle2 className="h-6 w-6 text-green-600 mt-1" />
            <div>
              <h3 className="font-semibold mb-1">Immediate Quarterly Savings</h3>
              <p className="text-gray-600">
                Reduce your Form 941 deposits starting next quarter. 
                Real cash flow improvement, not just future tax savings.
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-4">
            <CheckCircle2 className="h-6 w-6 text-green-600 mt-1" />
            <div>
              <h3 className="font-semibold mb-1">Simple Qualification</h3>
              <p className="text-gray-600">
                Less than $5M revenue and under 5 years old? You qualify! 
                We handle all the forms and calculations.
              </p>
            </div>
          </div>
        </div>
        
        <Card className="p-6 bg-white">
          <CardHeader>
            <CardTitle>Real Startup Example</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="text-3xl font-bold text-primary">
                $427,000
              </div>
              <div className="text-lg">
                AI startup's R&D credit from GPT development
              </div>
              <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                <div>
                  <div className="text-sm text-gray-500">Without QSB benefit</div>
                  <div className="font-semibold">Wait years for profit</div>
                </div>
                <div>
                  <div className="text-sm text-gray-500">With QSB benefit</div>
                  <div className="font-semibold text-green-600">$106K/quarter now!</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  </section>
);
```

**4. Create Checkout Integration (client/src/pages/checkout.tsx):**
```typescript
// Ensure checkout page receives and displays calculation results
export const CheckoutPage: React.FC = () => {
  const navigate = useNavigate();
  const results = JSON.parse(sessionStorage.getItem('calculationResults') || '{}');
  const data = JSON.parse(sessionStorage.getItem('calculationData') || '{}');
  
  if (!results.federalCredit) {
    navigate('/');
    return null;
  }

  return (
    <div className="max-w-4xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Complete Your R&D Tax Credit Claim</CardTitle>
        </CardHeader>
        <CardContent>
          {/* Show calculation summary */}
          <div className="mb-6 p-4 bg-gray-50 rounded-lg">
            <div className="flex justify-between items-center mb-2">
              <span>Your Estimated Federal Credit:</span>
              <span className="text-2xl font-bold">${results.federalCredit.toLocaleString()}</span>
            </div>
            {results.qsbAnalysis?.isEligible && (
              <Badge className="bg-green-100 text-green-800">
                Eligible for immediate payroll tax savings!
              </Badge>
            )}
          </div>
          
          {/* Stripe checkout component */}
          <StripeCheckout
            amount={results.pricingTier.price}
            creditAmount={results.federalCredit}
            isQSB={results.qsbAnalysis?.isEligible}
          />
        </CardContent>
      </Card>
    </div>
  );
};
```

This comprehensive prompt will:
1. ✅ Add QSB eligibility checking with $500K payroll offset
2. ✅ Show cash flow benefits with quarterly breakdowns
3. ✅ Include Section 280C election options
4. ✅ Display legislative timeline and benefits
5. ✅ Add industry-specific examples
6. ✅ Create clear checkout CTA on results page
7. ✅ Update all messaging to emphasize immediate benefits
8. ✅ Maintain mobile responsiveness and simple language

The calculator will now properly showcase all the legislative benefits and drive users to checkout with excitement about their immediate cash flow opportunities!